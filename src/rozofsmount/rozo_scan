#!/bin/bash
# Copyright (c) 2010 Fizians SAS. <http://www.fizians.com>
# This file is part of Rozofs.
#
# Rozofs is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 2.
#
# Rozofs is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
#set -x

#
# This script is the user interface to the rozoFS scanning utility
# It comes with the rozofsmount client package.
#
# When current dir is a RozoFS mountpoint, it gets from the RozoFS client
# the export nodes as well as the current eid.
# Else it reads from the rozofs.conf configuration file the export nodes
# and get the eid from the -e opttion in the user command line

active=""
#set -x


usage() {
  if [[ ! -z "$1" ]]
  then
    printf "\n\033[1m\033[91m  !!! %s !!!\033[0m\n\n" "$1"
  fi  
  exit 1
}
#____________________________________________
#
# Get export hosts addresses from rozofs.conf
#
get_export_hosts() {
  exports=""
  
  if [ -f  /etc/rozofs/rozofs.conf ];
  then
    exports=`cat /etc/rozofs/rozofs.conf | grep export_hosts | awk -F'"' '{print $2}'`
    return
  fi
  
  if [ -f  /usr/local/etc/rozofs/rozofs.conf ]; 
  then
    exports=`cat /usr/local/etc/rozofs/rozofs.conf | grep export_hosts | awk -F'"' '{print $2}'`
    return  
  fi   
}
#
# Register parameters
#
eid=""
parameters=''
help_requested="NO"
verbose=""
fidMode="NO"

#
# Test environment ?
#
if [ "${ROOT_ROZO}" == "" ];
then
  SCAN="rozo_scan_by_criteria"
  DIAG="rozodiag"
  which ${DIAG} >> /dev/null
  if [ $? -ne 0 ];
  then 
    usage "${DIAG} not found"
  fi
else
  SCAN="${ROOT_ROZO}/tests/build/src/exportd/rozo_scan_by_criteria"  
  DIAG="${ROOT_ROZO}/tests/build/src/rozodiag/rozodiag"
fi

#
# Need to be root
if [ $EUID -ne 0 ]
then
  usage "You need to have root privileges."
fi  
#_________________________
# Loop on input parameters
#
while [ ! -z $1 ];
do

  ThisParameter=$1
  shift 1
  
  #___________
  # Debug mode
  #
  if [ ${ThisParameter} == "--debug" ]
  then
    set -x
    continue
  fi
  
  #___________
  # FID mode
  #
  if [ ${ThisParameter} == "fid" -o -z "${ThisParameter##fid=*}" ]
  then
    fidMode="YES"
  fi

  #_______________________________
  # Extract eid parameter when set
  #
  if [ ${ThisParameter} == "-e" -o ${ThisParameter} == "--eid" -o ${ThisParameter} == "e" -o ${ThisParameter} == "eid" ];
  then

    if [ -z $1 ]
    then
      usage "Missing eid value after -e,--eid option"
    fi
    
    eid="eid $1"
    shift 1      
    continue 
  fi
  
  #__________________________________
  # Check whether help is requested 
  #
  if [ ${ThisParameter} == "-h" -o ${ThisParameter} == "--help" -o ${ThisParameter} == "help" -o ${ThisParameter} == "h" ];
  then
    help_requested="YES"
  fi
  
  #_______________________________________
  # Regex must be re-quoted to avoid Linux 
  # interpretation of some characters 
  #
  if [ ${ThisParameter} == "regex" ];
  then
    ThisParameter=$1
    if [ -z ${ThisParameter} ];
    then
      usage "Missing regex value"
    fi
    
    #
    # Check the regex does not end by a closing bracket
    #
    if [ "${verbose}" != "" ];
    then
      last=$1
      last=${last: -1}
      if [ "${last}" == ')' -o "${last}" == '(' -o "${last}" == ']' -o "${last}" == '[' -o "${last}" == '}' -o "${last}" == '{' ];
      then
        echo
        echo "A space may be missing after the regex and before the bracket !!!"
        echo
      fi 
    fi     
    
    parameters="${parameters} regex '${ThisParameter}' "
    shift 1 
    continue   
  fi
  #_____________________________________________
  # verbose ; upward verbose in the command line
  #
  if [ ${ThisParameter} == "v" -o ${ThisParameter} == "vv" ];
  then
    verbose=${ThisParameter}
    continue   
  fi
  
  #___________________________________________________________
  # Re introduce \ before some characters
  # Note : in sed expression \\ to get \ + \( to set ( => \\\(
  #
  if [ ${ThisParameter} != "=" ]
  then
    if [ -z "${ThisParameter##*(*}"  ] 
    then
      ThisParameter=`echo ${ThisParameter} | sed -e 's#(#\\\(#g' -e 's#)#\\\)#g' -e 's#>#\\\>#g' -e 's#<#\\\<#g'`
    else 
      if [ -z "${ThisParameter##*)*}" ]
      then 
        ThisParameter=`echo ${ThisParameter} | sed -e 's#(#\\\(#g' -e 's#)#\\\)#g' -e 's#>#\\\>#g' -e 's#<#\\\<#g'`    
      else 
        if [ -z "${ThisParameter##*<*}" ] 
        then
          ThisParameter=`echo ${ThisParameter} | sed -e 's#(#\\\(#g' -e 's#)#\\\)#g' -e 's#>#\\\>#g' -e 's#<#\\\<#g'`    
        else 
          if [ -z "${ThisParameter##*>*}" ] 
          then
            ThisParameter=`echo ${ThisParameter} | sed -e 's#(#\\\(#g' -e 's#)#\\\)#g' -e 's#>#\\\>#g' -e 's#<#\\\<#g'`
          fi
        fi
      fi
    fi
  fi
  
  parameters="${parameters} ${ThisParameter}"
 
done


#________________________________________
# When no parameter is set, request help
#
if [ "${parameters}" == "" ];
then
  parameters="help"
  help_requested="YES"
fi


#_________________________________________________________
# Find out the current RozoFS exportd from the current path
#
res=`attr -qg rozofs.export . 2>/dev/null`
if [ $? -eq 0 ]
then

  #
  # This is a RozoFS mountpoint
  #
  exports=`echo ${res} | awk '{print $1;}'`
  
  #
  # When eid is not given in the commande line 
  # get it from the client
  #
  if [ -z "${eid}" ]
  then
    eid="eid "`echo ${res} | awk '{print $2}'`
  fi 
   
else

  #
  # This is not a RozoFS mountpoint
  # Read rozofs.conf file
  #
  get_export_hosts
  if [ ${exports} == "" ];
  then
    usage "\"${PWD}\" is not a RozoFS mountpoint,\nand rozofs.conf configuration file can not be read."
  fi
  
  #
  # This is not a RozoFS mountpoint and eid is missing
  #
  if [ "${fidMode}" != "YES" -a "${eid}" == "" -a "${help_requested}" == "NO" ];
  then
    echo ""
    echo "\"${PWD}\" is not a RozoFS mountpoint,"
    echo "and eid is not set to tell the targeted RozoFS file system."
    parameters="help"
  fi  
fi
 
#_________________________________________________________________
# Find out which of these exports is the active one using rozodiag
#
for active in `echo $exports | tr \/ ' '`
do
 ${DIAG} -t 4 -i ${active} -T export:0 -c up | grep uptime >> /dev/null
 case "$?" in
   "0") break;;
   *)   active="";;
 esac      
done
case "${active}" in
 "") {
   usage "Active exportd not found within ${exports}"
 };;
esac   

#__________________________________________
# Forward the command to the active axportd
#
ssh -q ${active} "${SCAN} ${verbose} ${eid} ${parameters} "
exit $?
