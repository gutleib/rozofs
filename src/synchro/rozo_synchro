#!/bin/bash
# Copyright (c) 2010 Fizians SAS. <http://www.fizians.com>
# This file is part of Rozofs.
#
# Rozofs is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 2.
#
# Rozofs is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see
# <http://www.gnu.org/licenses/>.

#set -x
PING="ping -q -W 2 -c1 "


#_________________________________________________
# General syntax
#_________________________________________________
syntax() {
  PRG=`basename $0`
  if [[ "$1" != "" ]]
  then
    printf "\n\033[91m$* !!!\033[0m\n\n"
  fi
  printf "\033[4musage :\033[0m\n"
  printf "\033[1m${PRG} list [<name>]\033[0m\n"
  printf "             To list configured RozoFS synchronizations.\n"
  printf "\033[1m${PRG} history <name>\033[0m\n"
  printf "             To get the history of this RozoFS synchronization.\n"
  printf "\033[1m${PRG} create <name> [--period <p>] [--bw <#MB/s>] --source <S> [--project <P>] --target <T> --destination <D>  \033[0m\n"
  printf "             To create a new RozoFS synchronization.\n"
  printf "\033[1m${PRG} modify <name> [--target <newT>][--destination <newD>][--period <p>][--bw <#MB/s>][--full]\033[0m\n"
  printf "             To modify an existing RozoFS synchronization.\n"
  printf "\033[1m${PRG} delete <name> \033[0m\n"
  printf "             To delete an existing RozoFS synchronization.\n"
  printf "\033[1m${PRG} run <name> [--full] [--dry] [--force]\033[0m\n"
  printf "             To run an existing RozoFS synchronization.\n"
  printf "\033[1m${PRG} abort <name>\033[0m\n"
  printf "             To abort a running RozoFS synchronization.\n"
  exit 1
}
#_________________________________________________
# history syntax
# history <name> 
#_________________________________________________
history_syntax() {
  PRG=`basename $0`
  if [[ "$1" != "" ]]
  then
    printf "\n$* !!!\n\n"
  fi
  printf "\033[4musage :\033[0m\n"
  printf "  \033[1m${PRG} history <name> \033[0m\n"
  printf "      \033[1m<name>\033[0m           The name of the RozoFS synchronization.\n"
  exit 1
}    
#_________________________________________________
# Check if a given synchro is running
#_________________________________________________
check_synchro_is_running() {
  PID=`ps -ef | grep -v grep | grep -E ".*rozo_synchro.sh.*${RSYNCDIR}/${NAME}.*" | awk '{print $2}'`
  if [[ "${PID}" != "" ]]
  then
    echo "YES"  
    return
  fi
  echo "NO"
}    
#_________________________________________________
# Display history of one specific synchronization
#_________________________________________________
history() {
  #
  # Control the name is given
  #
  if [[ "${NAME}" == "" ]]
  then
    history_syntax "Missing <name> for history"
  fi 
  #
  # Check a synchro exists with this name
  #   
  if [ ! -d ${RSYNCDIR}/${NAME} ]
  then
    history_syntax "RozoFS synchronization \"${NAME}\" does not exist"
  fi
  #
  # Display up to 4 history files
  #   
  HISTORY="${RSYNCDIR}/${NAME}/history"
  for i in $(seq 4 -1 1)
  do
    if [ -f ${HISTORY}.${i} ];
    then
      cat ${HISTORY}.${i}
    fi
  done  
  if [ -f ${HISTORY} ];
  then
    cat ${HISTORY}
  fi
}   
#_________________________________________________
# Compute next running date from last time stamp
# and period
#_________________________________________________
compute_next_date() {

  NEXT_RUN=""

  if [[ "${PERIOD}" == "" ]]
  then 
    return
  fi
 
  if [[ "${timestamp}" == "" ]]
  then 
    return
  fi
  TS=`echo ${timestamp} | awk -F'-' '{print $1"-"$2"-"$3" "$4;}'` 
  NEXT_RUN=`date "+%Y-%m-%d-%H:%M:%S" --date="${TS} ${PERIOD} min"`
}      
#_________________________________________________
# Display one specific synchronization status
#_________________________________________________
display_one_synchronization() {
  #
  # Control the name is given
  #
  if [[ "$1" == "" ]]
  then
    echo "Missing synchronization name"
    exit 1
  fi  
  #
  # Check a synchro exists with this name
  #   
  DIR="${RSYNCDIR}/$1"  
  if [ ! -d ${DIR} ]
  then
    echo "$1 is not the name of a configured synchronization"
    exit 1
  fi  
  
  case "$2" in
    "") details="NO";;
    *)  details=$2;;
  esac
    
  total_success=0
  total_failed=0
  total_remaining=0
  total=0
  
  # Build source list
  DIRNAME=`echo $DIR | tr \/ _`

  FAILED="${DIR}/failed_directories"
  REMAINING="${DIR}/remaining_directories"
  RESULTS="${DIR}/results"
  
  printf "\n    {\n"
  printf "      \"%s\" \t\t: \"%s\",\n" "NAME" $1


  if [ -f ${DIR}/timestamp ]
  then    
    timestamp=`cat ${DIR}/timestamp`
  else
    timestamp=""
  fi  
  printf "      \"%s\" \t: \"%s\",\n" "LAST SYNCHRO" "${timestamp}"

  PERIOD=`read_cfg PERIOD`
  if [[ "${PERIOD}" == "" ]]
  then
    printf "      \"%s\" \t\t: \"%s\",\n" "PERIOD" "NONE"
  else  
    printf "      \"%s\" \t\t: %s,\n" "PERIOD" ${PERIOD}
  fi
  
  compute_next_date   
  if [[ "${NEXT_RUN}" != "" ]]
  then
    printf "      \"%s\" \t\t: \"%s\",\n" "NEXT" "${NEXT_RUN}" 
  fi
    
  if [ -f ${DIR}/state ];
  then   
    state=`awk -F':' '{if ($1=="STATE ") print $2;}' ${DIR}/state`
    state=${state:1:100}
    cause=`awk -F':' '{if ($1=="CAUSE ") print $2;}' ${DIR}/state`
    cause=${cause:1:100}
  else
    state="NONE"
    cause="NONE"
  fi        
  printf "      \"%s\" \t\t: \"%s\",\n" "STATE" "${state}"
  printf "      \"%s\" \t\t: \"%s\",\n" "CAUSE" "${cause}"


  EID=`read_cfg EID`
  printf "      \"%s\" \t\t: %s,\n" "EID" ${EID}

  PROJECT=`read_cfg PROJECT`
  if [[ "$PROJECT" == "" ]]
  then
    printf "      \"%s\" \t: \"ALL\",\n" "PROJECT" 
  else  
    printf "      \"%s\" \t: %s,\n" "PROJECT" ${PROJECT}
  fi  

  BW=`read_cfg BW 0`  
  printf "      \"%s\" \t: %s,\n" "BW(MB/s)" ${BW}

  MNT=`read_cfg MNT`
  printf "      \"%s\" \t: \"%s\",\n" "SRC MNT" ${MNT}

  DIRECTORY=`read_cfg DIRECTORY` 
  printf "      \"%s\" \t: \"%s\",\n" "SUB-DIR" ${DIRECTORY}

  TARGET=`read_cfg TARGET`
  printf "      \"%s\" \t\t: \"%s\",\n" "TARGET" ${TARGET}

  BASE_DST=`read_cfg BASE_DST`          
  printf "      \"%s\" \t\t: \"%s\"\n" "DEST" ${BASE_DST}

  if [ ! -f ${RESULTS} ];
  then
    printf "    }\n"  
    return
  fi
  
  
  if [[ "$details" == "NO" ]]
  then
    printf "    }\n"
    return
  fi  
  
  cat ${RESULTS}
  
  printf "      , \"UNSUCCESSFULL DIRECTORIES\" : ["
  FIRST="YES"

  if [ -f ${FAILED}.update ]
  then
    for d in `cat ${FAILED}.update`
    do
      if [[ "$FIRST" == "YES" ]]
      then
        FIRST="NO"
      else  
        printf ","
      fi 
      printf "\n           { \"REASON\" : \"FAILED\", \"DIR\" : \"%s\" }" $d
    done
  fi
  if [ -f ${FAILED}.recursive ]
  then
    for d in `cat ${FAILED}.recursive`
    do
      if [[ "$FIRST" == "YES" ]]
      then
        FIRST="NO"
      else  
        printf ","
      fi 
      printf "\n           { \"REASON\" : \"FAILED\", \"DIR\" : \"%s\" }" $d
    done
  fi
  if [ -f ${REMAINING}.update ]
  then  
    for d in `cat ${REMAINING}.update`
    do
      if [[ "$FIRST" == "YES" ]]
      then
        FIRST="NO"
      else  
        printf ","
      fi 
      printf "\n           { \"REASON\" : \"REMAINING\", \"DIR\" : \"%s\" }" $d
    done  
  fi  
  if [ -f ${REMAINING}.recursive ]
  then  
    for d in `cat ${REMAINING}.recursive`
    do
      if [[ "$FIRST" == "YES" ]]
      then
        FIRST="NO"
      else  
        printf ","
      fi 
      printf "\n           { \"REASON\" : \"REMAINING\", \"DIR\" : \"%s\" }" $d
    done  
  fi  
  printf "\n      ]\n"
  printf "    }\n"  
  return

}           
#_________________________________________________
# List one or all configured synchronizations
#_________________________________________________
list() {
  #
  # If a name is given display this synchro
  #
  if [[ "${NAME}" != "" ]]
  then
    #
    # Check a synchro exists with this name
    #   
    DIR="${RSYNCDIR}/$1"  
    if [ ! -d ${DIR} ]
    then
      echo "${NAME} is not the name of a configured synchronization"
      exit 1
    fi  
    #
    # Request detailed information
    #
    display_one_synchronization ${NAME} "YES"    
    exit 0
  fi   
  #
  # No name so display every syncro
  #
  FIRST="YES"  
  printf "{ \"RozoFS synchronizations\" : \n"
  printf "  ["
  for dir in `ls ${RSYNCDIR}`
  do
    if [ -d ${RSYNCDIR}/${dir} ]
    then
      if [[ "$FIRST" == "YES" ]]
      then
        FIRST="NO"
      else  
        printf "    ,"
      fi 
      #
      # Request non detailed information
      #       
      display_one_synchronization ${dir} "NO"
    fi
  done
  printf "  ]\n}\n"  
  exit 0
}
#_________________________________________________
# Write configuration file
#_________________________________________________
write_cfg() {

  echo "#${NAME}" > ${DIR}/cfg
  
  #
  # Write the configuration file
  #
  if [[ "${PERIOD}" != "" ]]
  then
    printf "PERIOD = %s\n" ${PERIOD} >> ${DIR}/cfg 
  fi    
  printf "BW = %s\n" ${BW} >> ${DIR}/cfg     
  printf "EID = %s\n" ${EID} >> ${DIR}/cfg
  if [[ "${PROJECT}"  != "" ]]
  then
    printf "PROJECT = %s\n" ${PROJECT} >> ${DIR}/cfg
  fi    
  printf "MNT = %s\n" ${MNT} >> ${DIR}/cfg   
  printf "DIRECTORY = %s\n" ${DIRECTORY} >> ${DIR}/cfg   
  printf "TARGET = %s\n" ${TARGET} >> ${DIR}/cfg 
  printf "BASE_DST = %s\n" ${BASE_DST} >> ${DIR}/cfg
}
#_________________________________________________
# Re-initialize a synchro
#_________________________________________________
reinit() {

  #
  # Re-initialize the status
  #
  echo "INIT" > ${DIR}/state
  rm -f ${DIR}/timestamp
}
#_________________________________________________
# Read a configuration file element
#_________________________________________________
read_cfg() {

  if [[ "$1" == "" ]]
  then
    val=""
  else  
    val=`awk '{if ($1==element) print $3;}' element=$1 ${CFG}`
  fi 
   
  if [ "$val" == "" -a "$2" != "" ];
  then
    echo $2
  else
    echo ${val}
  fi        
}
#_________________________________________________
# Create syntax
# create <name> --target <T> --source <S> --destination <D>  [--project <P>]
#_________________________________________________
create_syntax() {
  PRG=`basename $0`
  if [[ "$1" != "" ]]
  then
    printf "\n$* !!!\n\n"
  fi
  printf "\033[4musage :\033[0m\n"
  printf "  \033[1m${PRG} create <name> [--period <p>] [--bw <#MB/s>] --source <S> [--project <P>] --target <T> --destination <D>  \033[0m\n"
  printf "      \033[1m<name>\033[0m           The name of the RozoFS synchronization.\n"
  printf "      \033[1m[--period <p>]\033[0m       Period in minutes between each synchronization.\n"
  printf "      \033[1m[--bw <#MB/s>]\033[0m       Rsync bandwith limitation in MB/s for each source node.\n"
  printf "      \033[1m--source <S>\033[0m         The source directory within a RozoFS file system.\n"
  printf "      \033[1m[--project <P>]\033[0m      Limits the synchronization to this project number.\n"
  printf "      \033[1m--target <T>\033[0m         The destination hostname or IP address.\n"
  printf "      \033[1m--destination <D>\033[0m    The destination directory.\n"
  exit 1
}      
#_________________________________________________
# Create a new synchronizations
#_________________________________________________
create() {
  #
  # Control the name is given
  #
  if [[ "${NAME}" == "" ]]
  then
    create_syntax "Missing <name> for create"
  fi
  #
  # Check a synchro exists with this name
  #   
  if [ -d ${RSYNCDIR}/${NAME} ]
  then
    create_syntax "RozoFS synchronization \"${NAME}\" already exists"
  fi
  #
  # Control the source is given
  #
  if [[ "${DIRECTORY}" == "" ]]
  then
    create_syntax "Missing --source <S> for create"
  fi    
  #
  # Control the source exists
  #
  if [ ! -d ${DIRECTORY} ]
  then
    create_syntax "\"${DIRECTORY}\" is not an existing directory"
  fi
  #
  # Find out the eid
  #
  EID=`attr -g rozofs ${DIRECTORY} | awk '{if ($1=="EID") {print $3;}}'`
  if [[ "${EID}" == "" ]]
  then
    create_syntax "\"${DIRECTORY}\" is not a valid RozoFS directory"
  fi    
  #
  # Find out the mountpoint
  #
  MNT=`findmnt -nT ${DIRECTORY} | awk '{print $1}'`
  if [[ "${MNT}" == "" ]]
  then
    create_syntax "Can not run findmnt on ${DIRECTORY}"
  fi
  #
  # Substract the mountpoint at the begining of the input directory
  #
  DIRECTORY="${DIRECTORY//${MNT}/}" 
  #
  # Control the target is given
  #
  if [[ "${TARGET}" == "" ]]
  then
    create_syntax "Missing --target <T> for create"
  fi     
  #
  # Control the destination is given
  #
  if [[ "${BASE_DST}" == "" ]]
  then
    create_syntax "Missing --destination <D> for create"
  fi 
  #
  # Control the target is reachable
  #
  ${PING} ${TARGET} > /dev/null
  if [ $? -ne 0 ];
  then 
    printf " !!! warning !!! Target %s is unreachable !!!\n" ${TARGET}  
  fi     
  #
  # Control the project
  #
  if [[ "${PROJECT}" != "" ]]
  then
    #
    # Project has to be an integer
    #    
    if [ "${PROJECT}" -eq "${PROJECT}" ] 2>/dev/null
    then
      #
      # Project 0 does not exist
      #             
      if [ ${PROJECT} -eq 0 ]
      then
        create_syntax "--project can not be 0"          
      fi
      #
      # Project is a 2 bytes value
      #             
      if [ ${PROJECT} -ge 65535 ]
      then
        create_syntax "--project must be lower than 65535"          
      fi
    else
      create_syntax "--project must be an integer"
    fi
  fi
  
  #
  # Control the period
  #
  if [[ "${PERIOD}" != "" ]]
  then
    #
    # Period has to be an integer
    #    
    if [ "${PERIOD}" -eq "${PERIOD}" ] 2>/dev/null
    then
      #
      # Period 0 no period
      #             
      if [ ${PERIOD} -eq 0 ]
      then
        PERIOD=""          
      fi
    else
      create_syntax "--period must be an integer"
    fi 
  fi  
  #
  # Create the new synchronization directory
  #
  DIR="${RSYNCDIR}/${NAME}"
  mkdir -p ${DIR}
  
  # 
  # Create configuration file
  #
  write_cfg
  reinit
}
#_________________________________________________
# modify syntax
# modify <name> [--target <newT>]|--destination <newD>][--period <p>]
#_________________________________________________
modify_syntax() {
  PRG=`basename $0`
  if [[ "$1" != "" ]]
  then
    printf "\n$* !!!\n\n"
  fi
  printf "\033[4musage :\033[0m\n"
  printf "  \033[1m${PRG} modify <name> [--target <newT>][--destination <newD>][--period <p>][--bw <#MB/s>][--full]\033[0m\n"
  printf "      \033[1m<name>\033[0m                  The name of the RozoFS synchronization.\n"
  printf "      \033[1m[--target <newT>]\033[0m       The destination hostname or IP address.\n"
  printf "      \033[1m|--destination <newD>]\033[0m  The destination directory.\n"
  printf "      \033[1m[--full]\033[0m                To request next synchronization to be a full synchronization.\n"
  printf "      \033[1m[--period <p>]\033[0m          Period in minutes between each synchronization.\n"
  printf "                              A period of 0 means no period.\n"
  printf "      \033[1m[--bw <#MB/s>]\033[0m          Rsync bandwith limitation in MB/s for each source node.\n"
  exit 1
}    
#_________________________________________________
# modify an existing synchronizations
#_________________________________________________
modify() {
  mod="NO"
  #
  # Control the name is given
  #
  if [[ "${NAME}" == "" ]]
  then
    modify_syntax "Missing <name> for modify"
  fi  
  #
  # Check a synchro exists with this name
  #   
  if [ ! -d ${RSYNCDIR}/${NAME} ]
  then
    modify_syntax "RozoFS synchronization \"${NAME}\" does not exist"
  fi
  #
  # Parse configuration file
  #
  DIR="${RSYNCDIR}/${NAME}"
  EID=`read_cfg EID`
  PROJECT=`read_cfg PROJECT`
  MNT=`read_cfg MNT`
  DIRECTORY=`read_cfg DIRECTORY`  

  #
  # BW change
  #
  if [[ "${BW}" == "" ]]
  then
    TARGET=`read_cfg BW 0`
  else  
    mod="YES"
  fi
  #
  # Control whether the target is changed
  #
  if [[ "${TARGET}" == "" ]]
  then
    TARGET=`read_cfg TARGET`
  else  
    mod="YES"
    full="YES"
  fi
  #
  # Control whether the destination is changed
  #
  if [[ "${BASE_DST}" == "" ]]
  then
    BASE_DST=`read_cfg BASE_DST`
  else  
    mod="YES"
    full="YES"    
  fi  
  # Control the target is reachable
  #
  ${PING} ${TARGET} > /dev/null
  if [ $? -ne 0 ];
  then 
    printf " !!! warning !!! Target %s is unreachable !!!\n" ${TARGET} 
  fi       
  #
  # Control whether the period is changed
  #
  if [ "${PERIOD}" == "" ]
  then
    PERIOD=`read_cfg PERIOD`
  else  
    #
    # Period has to be an integer
    #    
    if [ "${PERIOD}" -eq "${PERIOD}" ] 2>/dev/null
    then
      #
      # Period 0 no period
      #             
      if [ ${PERIOD} -eq 0 ]
      then
        PERIOD=""          
      fi
    else
      modify_syntax "--period must be an integer"
    fi
    mod="YES"
  fi  
  #
  # Rewrite the modified configuration file
  #
  if [ "${mod}" == "YES" ]
  then
    write_cfg
  fi  
  #
  # Next run will be a full synchro
  #
  if [ "${full}" != "" ]
  then
    reinit 
  fi  
}
#_________________________________________________
# delete syntax
# delete <name> 
#_________________________________________________
delete_syntax() {
  PRG=`basename $0`
  if [[ "$1" != "" ]]
  then
    printf "\n$* !!!\n\n"
  fi
  printf "\033[4musage :\033[0m\n"
  printf "  \033[1m${PRG} delete <name> \033[0m\n"
  printf "      \033[1m<name>\033[0m                    The name of the RozoFS synchronization.\n"
  exit 1
}   
#_________________________________________________
# delete an existing synchronizations
# delete <name> 
#_________________________________________________
delete() {
  #
  # Control the name is given
  #
  if [[ "${NAME}" == "" ]]
  then
    delete_syntax "Missing <name> for delete"
  fi  
  #
  # Check a synchro exists with this name
  #   
  DIR="${RSYNCDIR}/${NAME}" 
  if [ ! -d ${DIR} ]
  then
    delete_syntax "RozoFS synchronization \"${NAME}\" does not exist"
  fi
  
  DIRNAME=`echo $DIR | tr \/ _`  
  #
  # Check whether the synchro is running
  #
  status=`check_synchro_is_running`
  if [ "${status}" == "YES" ]
  then
     printf "RozoFS synchronization \"${NAME}\" is running.\n"  
     exit 1
  fi 
  #
  # Just delete the RozoFS synchronization directory
  #
  rm -rf ${RSYNCDIR}/${NAME}
  rm -rf /tmp/${DIRNAME}.*
}
#_________________________________________________
# run syntax
# run <name> [--full] [--force][--dry]
#_________________________________________________
run_syntax() {
  PRG=`basename $0`
  if [[ "$1" != "" ]]
  then
    printf "\n$* !!!\n\n"
  fi
  printf "\033[4musage :\033[0m\n"
  printf "  \033[1m${PRG} run <name> [--force][--full] \033[0m\n"
  printf "      \033[1m<name>\033[0m          The name of the RozoFS synchronization.\n"
  printf "      \033[1m[--force]\033[0m           By-pass time check comparison.\n"
  printf "      \033[1m[--full]\033[0m            The process to a full synchronization.\n"
  printf "      \033[1m[--dry]\033[0m             Just display the directories to synchronize.\n"
  exit 1
}   
#_________________________________________________
# run an existing synchronizations
# delete <name> 
#_________________________________________________
run() {
  #
  # Control the name is given
  #
  if [[ "${NAME}" == "" ]]
  then
    run_syntax "Missing <name> for run"
  fi  
  #
  # Check a synchro exists with this name
  #   
  if [ ! -d ${RSYNCDIR}/${NAME} ]
  then
    run_syntax "RozoFS synchronization \"${NAME}\" does not exist"
  fi  
  #
  # Some controls when this is not a dry synchro
  #
  if [ "${dry}" == "" ]
  then
    #
    # Check whether the synchro is running
    #
    status=`check_synchro_is_running`
    if [ "${status}" == "YES" ]
    then
      printf "RozoFS synchronization \"${NAME}\" is running.\n"  
      exit 1
    fi 

    DIR="${RSYNCDIR}/${NAME}"

    #
    # Check it is time for periodic synchro 
    # when force is not set
    #
    if [[ "${force}" == "NO" ]]
    then
      if [ -f ${DIR}/timestamp ]
      then    
        timestamp=`cat ${DIR}/timestamp`
      else
        timestamp=""
      fi  
      PERIOD=`read_cfg PERIOD`  
      compute_next_date   
      if [[ "${NEXT_RUN}" != "" ]]
      then 
        NOW=`date "+%Y-%m-%d-%H:%M:%S"`
        if [[ ! "${NEXT_RUN}" < "${NOW}" ]];
        then
          echo "Next ${NAME} synchro is foreseen on ${NEXT_RUN}"
          return
        fi
      fi
    fi 
     
  fi  

  #
  # Launch the synchronization
  #
  rozo_synchro.sh ${verbose} ${full} ${dry} -d ${RSYNCDIR}/${NAME}
}
#_________________________________________________
# abort syntax
# abort <name> [--full] 
#_________________________________________________
abort_syntax() {
  PRG=`basename $0`
  if [[ ! "$1" == "" ]]
  then
    printf "\n$* !!!\n\n"
  fi
  printf "\033[4musage :\033[0m\n"
  printf "  \033[1m${PRG} abort <name>\033[0m\n"
  exit 1
} 
#_________________________________________________
# abort an existing synchronization
# abort <name> 
#_________________________________________________
abort() {
  #
  # Control the name is given
  #
  if [[ "${NAME}" == "" ]]
  then
    abort_syntax "Missing <name> for abort"
  fi    
  #
  # Check a synchro exists with this name
  #   
  if [ ! -d ${RSYNCDIR}/${NAME} ]
  then
    abort_syntax "RozoFS synchronization \"${NAME}\" does not exist"
  fi
  #
  # Check whether the synchro is running
  #
  status=`check_synchro_is_running`
  if [ "${status}" == "NO" ]
  then
    printf "RozoFS synchronization \"${NAME}\" is not running\n"
    exit 1
  fi  
 
  #
  # kill the synchroniation
  #
  kill ${PID}
}
#_________________________________________________
# Run every periodic synchronization
#_________________________________________________
periodic() {
  #
  # Loop an all configured synchronizations
  #
  for NAME in `ls ${RSYNCDIR}`
  do
    #
    # Only keep directories
    #
    DIR="${RSYNCDIR}/${NAME}"    
    if [ -d ${DIR} ]
    then
      #
      # Check whether this synchro is periodic
      #
      PERIOD=`read_cfg PERIOD`
      if [ "${PERIOD}" != "" ]
      then
        # 
        # Launch it. If it is time to
        # synchronization will occur 
        #
        run
      fi  
    fi
  done
  exit 0
}
          #_________________________________________________#
          #                                                 #
          #                    M A I N                      #
          #_________________________________________________#

#
# Save the input command
#
saved_command=$*


# 
# Initialize parameter's defaults
#    
action=""
NAME=""
TARGET=""
DIRECTORY=""
MNT=""
BASE_DST=""
PROJECT=""
PERIOD=""
BW=""
verbose=""
full=""
dry=""
local="NO"
force="NO"

#_________________________________________________________
# When the local node is not the active exportd node, one
# has to find the active exportd node to foward the command
# to it. The list of exportd nodes is found from rozofs.conf
# The active export within the export nodes is found using
# a rozodiag command
#_________________________________________________________

# 
# When this node is not the active exportd node
#
if [ ! -f /etc/rozofs/export.conf -a ! -f /usr/local/etc/rozofs/export.conf ]
then
  
  # 
  # Get the exportd hostnames for rozofs.conf
  #
  active_exportd=""
  exports=`cat /etc/rozofs/rozofs.conf | grep export_hosts | awk -F'"' '{print $2}'`
  if [ $? -ne 0 ];
  then
    exports=`cat /usr/local/etc/rozofs/rozofs.conf | grep export_hosts | awk -F'"' '{print $2}'`
    if [ $? -ne 0 ];
    then
      echo "Can not read export hosts from rozofs.conf"
      exit 1
    fi  
  fi
  
  # 
  # Find out which of these exportd is the active using rozodiag
  #
  for export in `echo $exports | tr \/ ' '`
  do
    for word in `rozodiag -i ${export} -T export:0 -c up`
    do
      if [[ ${word} == "uptime" ]]
      then
        active_exportd=${export}
        break
      fi 
    done
    case "${active_exportd}" in
      "");;
      *) break;
    esac
  done

  #
  # Forward the command to the active axport
  #
  ssh ${active_exportd} "$0 ${saved_command}"
  exit $?
fi

#
# This is the active export. Run the command
#


#_________________________________________________________
# Parse input parameters
#_________________________________________________________

while [ ! -z $1 ];
do
  case "$1" in 

    # Remote target name or address     
    --target) {
       case "$2" in 
         "") syntax "Missing target name after --target option";;
       esac  
       if [ "${TARGET}" != "" ];
       then
         syntax "At least 2 target defined \"${TARGET}\" and \"$2\""
       fi  
       TARGET=$2
       shift 2
    };;
    
    # Source directory of the RozoFS synchronization         
    --source) {
       case "$2" in 
         "") syntax "Missing source directory name after --source option";;
       esac  
       if [ "${DIRECTORY}" != "" ];
       then
         syntax "At least 2 source directories defined \"${DIRECTORY}\" and \"$2\""
       fi  
       DIRECTORY=$2
       shift 2
    };;

    # Destination directory of the RozoFS synchronization         
    --destination) {
       case "$2" in 
         "") syntax "Missing destination directory name after --destination option";;
       esac  
       if [ "${BASE_DST}" != "" ];
       then
         syntax "At least 2 destination directories defined \"${BASE_DST}\" and \"$2\""
       fi  
       BASE_DST=$2
       shift 2
    };;
    
    # Limit the source synchronization to a project        
    --project) {
       case "$2" in 
         "") syntax "Missing project number after --project option";;
       esac  
       if [ "${PROJECT}" != "" ];
       then
         syntax "At least 2 projects defined \"${PROJECT}\" and \"$2\""
       fi  
       PROJECT=$2
       shift 2
    };;
    
    # BW limitation per source node        
    --bw) {
       case "$2" in 
         "") syntax "Missing bandwith value in MB/s";;
       esac  
       if [ "${BW}" != "" ];
       then
         syntax "At least 2 bandwith values defined \"${BW}\" and \"$2\""
       fi  
       BW=$2
       shift 2
    };;

    # Periodic synchronization
    --period) {
       case "$2" in 
         "") syntax "Missing period value after --period option";;
       esac  
       if [ "${PERIOD}" != "" ];
       then
         syntax "At least 2 periods defined \"${PERIOD}\" and \"$2\""
       fi  
       PERIOD=$2
       shift 2
    };;
    
    # Actions    
    create|modify|delete|run|list|history|abort|periodic) {
       if [ "${action}" != "" ];
       then
         syntax "At least 2 actions defined \"${action}\" and \"$1\""
       fi  
       action=$1
       shift 1
    };;     

    # For full synchronization run    
    --full) {
       full=" -f "
       shift 1
    };;     

    # For force synchronization run    
    --force) {
       force="YES"
       shift 1
    };;     
    
    # For synchronization dry run    
    --dry) {
       dry=" -D "
       shift 1
    };;     

    # help requested       
    -h|--help["?") syntax "$1";;

    # debug mode
    -debug|--debug) set -x; verbose=" -debug "; shift 1;;
    
    # verbose mode
    -v)  verbose=" -v "; shift 1;;
    
    # SHould be a name
    *) {
       if [[ "${NAME}" == "" ]]
       then
         NAME=$1
       else  
         syntax "Unexpected parameters \"$1\" & \"${NAME}\""
       fi 
       shift 1
    };;

  esac
done



#
# Find out the private RozoFS mount point
#
PRIVATE=`df | awk '{if ($1=="rozofs") print $6;}' | awk -F"/" '{if ($NF=="private") print $0;}'`
if [ $? -ne 0 ];
then
  echo "No private RozoFS mount point exist on this node"
  exit 1
fi
case "${PRIVATE}" in
 "")  echo "No private RozoFS mount point exist on this node"; exit 1;;
esac 

#
# Check rsync directory under private
#
RSYNCDIR="${PRIVATE}/.rozo_synchro"
if [ ! -d ${RSYNCDIR} ];
then
  mkdir ${RSYNCDIR}
  touch ${RSYNCDIR}/.nodefile
fi

# 
# Let's run the request action
#
case "${action}" in
  create|modify|delete|run|list|history|abort|periodic) ${action};;
  *) syntax;;
esac
