/*

 File generated by ../../tools/rebalance_config.py from rebalance_config.input

 Copyright (c) 2010 Fizians SAS. <http://www.fizians.com>
 This file is part of Rozofs.

 Rozofs is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published
 by the Free Software Foundation, version 2.

 Rozofs is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see
 <http://www.gnu.org/licenses/>.
 */
#ifndef _REBALANCE_CONFIG_H
#define _REBALANCE_CONFIG_H

#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <errno.h>
#include <libconfig.h>
#include <unistd.h>
#include <inttypes.h>
#include <sys/types.h>
#include <dirent.h>
void rebalance_config_read(char * fname);

int rebalance_config_does_file_exist(char * fname);

/*_______________________________
** ENUM definion
*/

/*_______________________________
** rebalance_config structure
*/
typedef struct _rebalance_config_t {

  /*
  ** global scope configuration parameters
  */

  // This parameter defines the threshold in percentage around the average 
  // storage occupancy to which the balancing applies. Typically, the balancing 
  // stops when all the storages (sid) are included in the window defined by that 
  // threshold. 
  // See the -t parameter of the CLI.
  int32_t     free_avg_tolerance;
  // This parameter defines the free space threshold in percentage before 
  // triggering a storage balancing. If the free available space on sid is higher 
  // than that threshold, the balancing process stops. 
  // See the -a parameter of the CLI.
  int32_t     free_low_threshold;
  // This option defines the scanning frequency in seconds of the storage balancing 
  // process.
  // See the --frequency parameter of the CLI.
  int32_t     frequency;
  // Exclude files that are more recent than the specified delay. 
  // The delay is defined in minutes.
  // See the --olderm parameter of the CLI.
  int64_t     older;
  // Exclude files that are older than the specified delay. 
  // The delay is defined in minutes.
  // See the --newerm parameter of the CLI.
  int64_t     newer;
  // That option defines the file count threshold before triggering
  // an effective file move. The move occurs when the scan has either 
  // reached movesz or movecnt. 
  // See the --movecnt parameter of the CLI.
  int32_t     movecnt;
  // That option defines the file count threshold before triggering
  // an effective file move. The move occurs when the scan has either 
  // reached movesz or movecnt. 
  // See the --movesz parameter of the CLI.
  char *      movesz;
  // That option defines the maximun bandwidth in MB/s allocated to
  // the file mover.
  // See the --throughput parameter of the CLI.
  int32_t     throughput;
  // That option indicates the access mode used by the storage balancer for moving the file:
  // - rel: use relative mode (parent/child)
  // - abs: use full pathname mode
  // - fid: use i-node mode 
  char *      mode;
  // That option when asserted sets the process in verbose mode
  // See --verbose parameter of the CLI.
  int32_t     verbose;
  // That option gives the minimum size(in bytes) of an eligible file to rebalancing
  int64_t     minfilesz;
  // That option gives the mximum size(in bytes) of an eligible file to rebalancing
  int64_t     maxfilesz;
  // This indicator may tell that the nodes are unbalanced. So the first SIDs of the new distribution are allocated 
  // in size balancing maner, but also respecting collocation constraints. The last unbalancedNodes SIDs are then chosen 
  // in size balancing maner, forgetting prior collocation constraints. This enables to balance a 6 node unbalanced cluster.
  int32_t     unbalancedNodes;
} rebalance_config_t;

extern rebalance_config_t rebalance_config;

/*_______________________________
** ENUM macro
*/
#endif
