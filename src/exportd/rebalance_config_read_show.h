/*

 File generated by ../../tools/rebalance_config.py from rebalance_config.input

 Copyright (c) 2010 Fizians SAS. <http://www.fizians.com>
 This file is part of Rozofs.

 Rozofs is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published
 by the Free Software Foundation, version 2.

 Rozofs is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see
 <http://www.gnu.org/licenses/>.
 */
#ifndef _REBALANCE_CONFIG_READ_SHOW_H
#define _REBALANCE_CONFIG_READ_SHOW_H

#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <errno.h>
#include <libconfig.h>
#include <unistd.h>
#include <inttypes.h>
#include <sys/types.h>
#include <dirent.h>
/*____________________________________________________________________________________________
**
** Set a value to a common configuration parameter
** 
** @param param   Parameter name
** @param value   New value to set
** 
** @retval 1 on success, 0 else
*/
static inline int rebalance_config_generated_set(char * pChar, char *parameter, char *value) {
  if (strcmp(parameter,"free_avg_tolerance")==0) {
    REBALANCE_CONFIG_SET_INT_MINMAX(free_avg_tolerance,value,0,100);
  }
  if (strcmp(parameter,"free_low_threshold")==0) {
    REBALANCE_CONFIG_SET_INT_MINMAX(free_low_threshold,value,0,100);
  }
  if (strcmp(parameter,"frequency")==0) {
    REBALANCE_CONFIG_SET_INT(frequency,value);
  }
  if (strcmp(parameter,"older")==0) {
    REBALANCE_CONFIG_SET_LONG(older,value);
  }
  if (strcmp(parameter,"newer")==0) {
    REBALANCE_CONFIG_SET_LONG(newer,value);
  }
  if (strcmp(parameter,"movecnt")==0) {
    REBALANCE_CONFIG_SET_INT(movecnt,value);
  }
  if (strcmp(parameter,"movesz")==0) {
    REBALANCE_CONFIG_SET_STRING(movesz,value);
  }
  if (strcmp(parameter,"throughput")==0) {
    REBALANCE_CONFIG_SET_INT(throughput,value);
  }
  if (strcmp(parameter,"mode")==0) {
    REBALANCE_CONFIG_SET_STRING(mode,value);
  }
  if (strcmp(parameter,"verbose")==0) {
    REBALANCE_CONFIG_SET_BOOL(verbose,value);
  }
  if (strcmp(parameter,"minfilesz")==0) {
    REBALANCE_CONFIG_SET_LONG(minfilesz,value);
  }
  if (strcmp(parameter,"maxfilesz")==0) {
    REBALANCE_CONFIG_SET_LONG(maxfilesz,value);
  }
  if (strcmp(parameter,"unbalancedNodes")==0) {
    REBALANCE_CONFIG_SET_INT_MINMAX(unbalancedNodes,value,0,2);
  }
  pChar += rozofs_string_append_error(pChar,"No such parameter ");
  pChar += rozofs_string_append_error(pChar,parameter);
  pChar += rozofs_eol(pChar);\
  return -1;
}
/*____________________________________________________________________________________________
**
** Search for parameters approximatively like a given string 
** 
** @param parameter   Approximative parameter name we are searching for
** 
** @retval The number of parameters matching the input string
*/
static inline int rebalance_config_generated_search(char * pChar, char *parameter) {
  int match = 0;

  if (strcasestr("free_avg_tolerance",parameter) != NULL) {
    match++;
    REBALANCE_CONFIG_IS_DEFAULT_INT(free_avg_tolerance,10);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// This parameter defines the threshold in percentage around the average \n");
    pChar += rozofs_string_append(pChar,"// storage occupancy to which the balancing applies. Typically, the balancing \n");
    pChar += rozofs_string_append(pChar,"// stops when all the storages (sid) are included in the window defined by that \n");
    pChar += rozofs_string_append(pChar,"// threshold. \n");
    pChar += rozofs_string_append(pChar,"// See the -t parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_INT_OPT(free_avg_tolerance,10,"0:100");
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("free_low_threshold",parameter) != NULL) {
    match++;
    REBALANCE_CONFIG_IS_DEFAULT_INT(free_low_threshold,40);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// This parameter defines the free space threshold in percentage before \n");
    pChar += rozofs_string_append(pChar,"// triggering a storage balancing. If the free available space on sid is higher \n");
    pChar += rozofs_string_append(pChar,"// than that threshold, the balancing process stops. \n");
    pChar += rozofs_string_append(pChar,"// See the -a parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_INT_OPT(free_low_threshold,40,"0:100");
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("frequency",parameter) != NULL) {
    match++;
    REBALANCE_CONFIG_IS_DEFAULT_INT(frequency,30);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// This option defines the scanning frequency in seconds of the storage balancing \n");
    pChar += rozofs_string_append(pChar,"// process.\n");
    pChar += rozofs_string_append(pChar,"// See the --frequency parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_INT(frequency,30);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("older",parameter) != NULL) {
    match++;
    REBALANCE_CONFIG_IS_DEFAULT_LONG(older,-1);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// Exclude files that are more recent than the specified delay. \n");
    pChar += rozofs_string_append(pChar,"// The delay is defined in minutes.\n");
    pChar += rozofs_string_append(pChar,"// See the --olderm parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_LONG(older,-1);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("newer",parameter) != NULL) {
    match++;
    REBALANCE_CONFIG_IS_DEFAULT_LONG(newer,-1);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// Exclude files that are older than the specified delay. \n");
    pChar += rozofs_string_append(pChar,"// The delay is defined in minutes.\n");
    pChar += rozofs_string_append(pChar,"// See the --newerm parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_LONG(newer,-1);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("movecnt",parameter) != NULL) {
    match++;
    REBALANCE_CONFIG_IS_DEFAULT_INT(movecnt,10);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// That option defines the file count threshold before triggering\n");
    pChar += rozofs_string_append(pChar,"// an effective file move. The move occurs when the scan has either \n");
    pChar += rozofs_string_append(pChar,"// reached movesz or movecnt. \n");
    pChar += rozofs_string_append(pChar,"// See the --movecnt parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_INT(movecnt,10);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("movesz",parameter) != NULL) {
    match++;
    REBALANCE_CONFIG_IS_DEFAULT_STRING(movesz,"1G");
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// That option defines the file count threshold before triggering\n");
    pChar += rozofs_string_append(pChar,"// an effective file move. The move occurs when the scan has either \n");
    pChar += rozofs_string_append(pChar,"// reached movesz or movecnt. \n");
    pChar += rozofs_string_append(pChar,"// See the --movesz parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_STRING(movesz,"1G");
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("throughput",parameter) != NULL) {
    match++;
    REBALANCE_CONFIG_IS_DEFAULT_INT(throughput,10);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// That option defines the maximun bandwidth in MB/s allocated to\n");
    pChar += rozofs_string_append(pChar,"// the file mover.\n");
    pChar += rozofs_string_append(pChar,"// See the --throughput parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_INT(throughput,10);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("mode",parameter) != NULL) {
    match++;
    REBALANCE_CONFIG_IS_DEFAULT_STRING(mode,"fid");
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// That option indicates the access mode used by the storage balancer for moving the file:\n");
    pChar += rozofs_string_append(pChar,"// - rel: use relative mode (parent/child)\n");
    pChar += rozofs_string_append(pChar,"// - abs: use full pathname mode\n");
    pChar += rozofs_string_append(pChar,"// - fid: use i-node mode \n");
    REBALANCE_CONFIG_SHOW_STRING(mode,"fid");
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("verbose",parameter) != NULL) {
    match++;
    REBALANCE_CONFIG_IS_DEFAULT_BOOL(verbose,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// That option when asserted sets the process in verbose mode\n");
    pChar += rozofs_string_append(pChar,"// See --verbose parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_BOOL(verbose,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("minfilesz",parameter) != NULL) {
    match++;
    REBALANCE_CONFIG_IS_DEFAULT_LONG(minfilesz,268435456);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// That option gives the minimum size(in bytes) of an eligible file to rebalancing\n");
    REBALANCE_CONFIG_SHOW_LONG(minfilesz,268435456);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("maxfilesz",parameter) != NULL) {
    match++;
    REBALANCE_CONFIG_IS_DEFAULT_LONG(maxfilesz,137438953472);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// That option gives the mximum size(in bytes) of an eligible file to rebalancing\n");
    REBALANCE_CONFIG_SHOW_LONG(maxfilesz,137438953472);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("unbalancedNodes",parameter) != NULL) {
    match++;
    REBALANCE_CONFIG_IS_DEFAULT_INT(unbalancedNodes,0);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// This indicator may tell that the nodes are unbalanced. So the first SIDs of the new distribution are allocated \n");
    pChar += rozofs_string_append(pChar,"// in size balancing maner, but also respecting collocation constraints. The last unbalancedNodes SIDs are then chosen \n");
    pChar += rozofs_string_append(pChar,"// in size balancing maner, forgetting prior collocation constraints. This enables to balance a 6 node unbalanced cluster.\n");
    REBALANCE_CONFIG_SHOW_INT_OPT(unbalancedNodes,0,"0:2");
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }
  if (match == 0) {
    pChar += rozofs_string_append_error(pChar,"No such parameter like ");
    pChar += rozofs_string_append_error(pChar,parameter);
    pChar += rozofs_eol(pChar);\
  }
  return match;
}
/*____________________________________________________________________________________________
**
** rebalance_config man function
**
*/
void man_rebalance_config(char * pChar) {
  pChar += rozofs_string_append_underscore(pChar,"\nUsage:\n");
  pChar += rozofs_string_append_bold(pChar,"\trebalanceconf [long]");
  pChar += rozofs_string_append     (pChar,"\t\tdisplays the whole rebalance_config configuration.\n");
  pChar += rozofs_string_append_bold(pChar,"\trebalanceconf [long] <scope>");
  pChar += rozofs_string_append     (pChar,"\tdisplays only the <scope> configuration part.\n");
  pChar += rozofs_string_append_bold(pChar,"\trebalanceconf search <parameter>");
  pChar += rozofs_string_append     (pChar,"\tdisplays parameters approximatively like <parameter>.\n");
  pChar += rozofs_string_append_bold(pChar,"\trebalanceconf reload");
  pChar += rozofs_string_append     (pChar,"\treloads and then displays the configuration.\n");
  pChar += rozofs_string_append_bold(pChar,"\trebalanceconf set <param> <value>");
  pChar += rozofs_string_append     (pChar,"\tmodifies a configuration parameter in memory.\n");
  pChar += rozofs_string_append_bold(pChar,"\trebalanceconf save");
  pChar += rozofs_string_append     (pChar,"\tsaves configuration from memory to disk.\n");
  pChar += rozofs_string_append_bold(pChar,"\trebalanceconf files");
  pChar += rozofs_string_append     (pChar,"\tReturns the name of the configuration file and the saved ones.\n");
}
/*____________________________________________________________________________________________
**
** global scope configuration parameters
**
*/
char * show_rebalance_config_module_global(char * pChar) {

  pChar += rozofs_string_append_effect(pChar,"#                                                            \n#     ", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"    GLOBAL SCOPE CONFIGURATION PARAMETERS         ", ROZOFS_COLOR_YELLOW ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"     \n#                                                            \n\n", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);

  REBALANCE_CONFIG_IS_DEFAULT_INT(free_avg_tolerance,10);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// This parameter defines the threshold in percentage around the average \n");
  pChar += rozofs_string_append(pChar,"// storage occupancy to which the balancing applies. Typically, the balancing \n");
  pChar += rozofs_string_append(pChar,"// stops when all the storages (sid) are included in the window defined by that \n");
  pChar += rozofs_string_append(pChar,"// threshold. \n");
  pChar += rozofs_string_append(pChar,"// See the -t parameter of the CLI.\n");
  REBALANCE_CONFIG_SHOW_INT_OPT(free_avg_tolerance,10,"0:100");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  REBALANCE_CONFIG_IS_DEFAULT_INT(free_low_threshold,40);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// This parameter defines the free space threshold in percentage before \n");
  pChar += rozofs_string_append(pChar,"// triggering a storage balancing. If the free available space on sid is higher \n");
  pChar += rozofs_string_append(pChar,"// than that threshold, the balancing process stops. \n");
  pChar += rozofs_string_append(pChar,"// See the -a parameter of the CLI.\n");
  REBALANCE_CONFIG_SHOW_INT_OPT(free_low_threshold,40,"0:100");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  REBALANCE_CONFIG_IS_DEFAULT_INT(frequency,30);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// This option defines the scanning frequency in seconds of the storage balancing \n");
  pChar += rozofs_string_append(pChar,"// process.\n");
  pChar += rozofs_string_append(pChar,"// See the --frequency parameter of the CLI.\n");
  REBALANCE_CONFIG_SHOW_INT(frequency,30);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  REBALANCE_CONFIG_IS_DEFAULT_LONG(older,-1);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Exclude files that are more recent than the specified delay. \n");
  pChar += rozofs_string_append(pChar,"// The delay is defined in minutes.\n");
  pChar += rozofs_string_append(pChar,"// See the --olderm parameter of the CLI.\n");
  REBALANCE_CONFIG_SHOW_LONG(older,-1);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  REBALANCE_CONFIG_IS_DEFAULT_LONG(newer,-1);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Exclude files that are older than the specified delay. \n");
  pChar += rozofs_string_append(pChar,"// The delay is defined in minutes.\n");
  pChar += rozofs_string_append(pChar,"// See the --newerm parameter of the CLI.\n");
  REBALANCE_CONFIG_SHOW_LONG(newer,-1);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  REBALANCE_CONFIG_IS_DEFAULT_INT(movecnt,10);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// That option defines the file count threshold before triggering\n");
  pChar += rozofs_string_append(pChar,"// an effective file move. The move occurs when the scan has either \n");
  pChar += rozofs_string_append(pChar,"// reached movesz or movecnt. \n");
  pChar += rozofs_string_append(pChar,"// See the --movecnt parameter of the CLI.\n");
  REBALANCE_CONFIG_SHOW_INT(movecnt,10);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  REBALANCE_CONFIG_IS_DEFAULT_STRING(movesz,"1G");
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// That option defines the file count threshold before triggering\n");
  pChar += rozofs_string_append(pChar,"// an effective file move. The move occurs when the scan has either \n");
  pChar += rozofs_string_append(pChar,"// reached movesz or movecnt. \n");
  pChar += rozofs_string_append(pChar,"// See the --movesz parameter of the CLI.\n");
  REBALANCE_CONFIG_SHOW_STRING(movesz,"1G");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  REBALANCE_CONFIG_IS_DEFAULT_INT(throughput,10);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// That option defines the maximun bandwidth in MB/s allocated to\n");
  pChar += rozofs_string_append(pChar,"// the file mover.\n");
  pChar += rozofs_string_append(pChar,"// See the --throughput parameter of the CLI.\n");
  REBALANCE_CONFIG_SHOW_INT(throughput,10);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  REBALANCE_CONFIG_IS_DEFAULT_STRING(mode,"fid");
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// That option indicates the access mode used by the storage balancer for moving the file:\n");
  pChar += rozofs_string_append(pChar,"// - rel: use relative mode (parent/child)\n");
  pChar += rozofs_string_append(pChar,"// - abs: use full pathname mode\n");
  pChar += rozofs_string_append(pChar,"// - fid: use i-node mode \n");
  REBALANCE_CONFIG_SHOW_STRING(mode,"fid");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  REBALANCE_CONFIG_IS_DEFAULT_BOOL(verbose,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// That option when asserted sets the process in verbose mode\n");
  pChar += rozofs_string_append(pChar,"// See --verbose parameter of the CLI.\n");
  REBALANCE_CONFIG_SHOW_BOOL(verbose,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  REBALANCE_CONFIG_IS_DEFAULT_LONG(minfilesz,268435456);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// That option gives the minimum size(in bytes) of an eligible file to rebalancing\n");
  REBALANCE_CONFIG_SHOW_LONG(minfilesz,268435456);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  REBALANCE_CONFIG_IS_DEFAULT_LONG(maxfilesz,137438953472);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// That option gives the mximum size(in bytes) of an eligible file to rebalancing\n");
  REBALANCE_CONFIG_SHOW_LONG(maxfilesz,137438953472);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  REBALANCE_CONFIG_IS_DEFAULT_INT(unbalancedNodes,0);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// This indicator may tell that the nodes are unbalanced. So the first SIDs of the new distribution are allocated \n");
  pChar += rozofs_string_append(pChar,"// in size balancing maner, but also respecting collocation constraints. The last unbalancedNodes SIDs are then chosen \n");
  pChar += rozofs_string_append(pChar,"// in size balancing maner, forgetting prior collocation constraints. This enables to balance a 6 node unbalanced cluster.\n");
  REBALANCE_CONFIG_SHOW_INT_OPT(unbalancedNodes,0,"0:2");
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  return pChar;
}
/*____________________________________________________________________________________________
**
** global scope configuration parameters
**
*/
char * show_rebalance_config_module_global_short(char * pChar) {

  pChar += rozofs_string_append_effect(pChar,"#                                                            \n#     ", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"    GLOBAL SCOPE CONFIGURATION PARAMETERS         ", ROZOFS_COLOR_YELLOW ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"     \n#                                                            \n\n", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);


  REBALANCE_CONFIG_IS_DEFAULT_INT(free_avg_tolerance,10);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// This parameter defines the threshold in percentage around the average \n");
    pChar += rozofs_string_append(pChar,"// storage occupancy to which the balancing applies. Typically, the balancing \n");
    pChar += rozofs_string_append(pChar,"// stops when all the storages (sid) are included in the window defined by that \n");
    pChar += rozofs_string_append(pChar,"// threshold. \n");
    pChar += rozofs_string_append(pChar,"// See the -t parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_INT_OPT(free_avg_tolerance,10,"0:100");
  }


  REBALANCE_CONFIG_IS_DEFAULT_INT(free_low_threshold,40);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// This parameter defines the free space threshold in percentage before \n");
    pChar += rozofs_string_append(pChar,"// triggering a storage balancing. If the free available space on sid is higher \n");
    pChar += rozofs_string_append(pChar,"// than that threshold, the balancing process stops. \n");
    pChar += rozofs_string_append(pChar,"// See the -a parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_INT_OPT(free_low_threshold,40,"0:100");
  }


  REBALANCE_CONFIG_IS_DEFAULT_INT(frequency,30);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// This option defines the scanning frequency in seconds of the storage balancing \n");
    pChar += rozofs_string_append(pChar,"// process.\n");
    pChar += rozofs_string_append(pChar,"// See the --frequency parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_INT(frequency,30);
  }


  REBALANCE_CONFIG_IS_DEFAULT_LONG(older,-1);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// Exclude files that are more recent than the specified delay. \n");
    pChar += rozofs_string_append(pChar,"// The delay is defined in minutes.\n");
    pChar += rozofs_string_append(pChar,"// See the --olderm parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_LONG(older,-1);
  }


  REBALANCE_CONFIG_IS_DEFAULT_LONG(newer,-1);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// Exclude files that are older than the specified delay. \n");
    pChar += rozofs_string_append(pChar,"// The delay is defined in minutes.\n");
    pChar += rozofs_string_append(pChar,"// See the --newerm parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_LONG(newer,-1);
  }


  REBALANCE_CONFIG_IS_DEFAULT_INT(movecnt,10);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// That option defines the file count threshold before triggering\n");
    pChar += rozofs_string_append(pChar,"// an effective file move. The move occurs when the scan has either \n");
    pChar += rozofs_string_append(pChar,"// reached movesz or movecnt. \n");
    pChar += rozofs_string_append(pChar,"// See the --movecnt parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_INT(movecnt,10);
  }


  REBALANCE_CONFIG_IS_DEFAULT_STRING(movesz,"1G");
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// That option defines the file count threshold before triggering\n");
    pChar += rozofs_string_append(pChar,"// an effective file move. The move occurs when the scan has either \n");
    pChar += rozofs_string_append(pChar,"// reached movesz or movecnt. \n");
    pChar += rozofs_string_append(pChar,"// See the --movesz parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_STRING(movesz,"1G");
  }


  REBALANCE_CONFIG_IS_DEFAULT_INT(throughput,10);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// That option defines the maximun bandwidth in MB/s allocated to\n");
    pChar += rozofs_string_append(pChar,"// the file mover.\n");
    pChar += rozofs_string_append(pChar,"// See the --throughput parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_INT(throughput,10);
  }


  REBALANCE_CONFIG_IS_DEFAULT_STRING(mode,"fid");
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// That option indicates the access mode used by the storage balancer for moving the file:\n");
    pChar += rozofs_string_append(pChar,"// - rel: use relative mode (parent/child)\n");
    pChar += rozofs_string_append(pChar,"// - abs: use full pathname mode\n");
    pChar += rozofs_string_append(pChar,"// - fid: use i-node mode \n");
    REBALANCE_CONFIG_SHOW_STRING(mode,"fid");
  }


  REBALANCE_CONFIG_IS_DEFAULT_BOOL(verbose,False);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// That option when asserted sets the process in verbose mode\n");
    pChar += rozofs_string_append(pChar,"// See --verbose parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_BOOL(verbose,False);
  }


  REBALANCE_CONFIG_IS_DEFAULT_LONG(minfilesz,268435456);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// That option gives the minimum size(in bytes) of an eligible file to rebalancing\n");
    REBALANCE_CONFIG_SHOW_LONG(minfilesz,268435456);
  }


  REBALANCE_CONFIG_IS_DEFAULT_LONG(maxfilesz,137438953472);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// That option gives the mximum size(in bytes) of an eligible file to rebalancing\n");
    REBALANCE_CONFIG_SHOW_LONG(maxfilesz,137438953472);
  }


  REBALANCE_CONFIG_IS_DEFAULT_INT(unbalancedNodes,0);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// This indicator may tell that the nodes are unbalanced. So the first SIDs of the new distribution are allocated \n");
    pChar += rozofs_string_append(pChar,"// in size balancing maner, but also respecting collocation constraints. The last unbalancedNodes SIDs are then chosen \n");
    pChar += rozofs_string_append(pChar,"// in size balancing maner, forgetting prior collocation constraints. This enables to balance a 6 node unbalanced cluster.\n");
    REBALANCE_CONFIG_SHOW_INT_OPT(unbalancedNodes,0,"0:2");
  }
  return pChar;
}
/*____________________________________________________________________________________________
**
** global scope configuration parameters
**
*/
char * save_rebalance_config_module_global(char * pChar) {

  pChar += rozofs_string_append(pChar,"#____________________________________________________________\n");
  pChar += rozofs_string_append(pChar,"# ");
  pChar += rozofs_string_append(pChar,"global");
  pChar += rozofs_string_append(pChar," scope configuration parameters\n");
  pChar += rozofs_string_append(pChar,"#____________________________________________________________\n\n");

  REBALANCE_CONFIG_IS_DEFAULT_INT(free_avg_tolerance,10);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// This parameter defines the threshold in percentage around the average \n");
    pChar += rozofs_string_append(pChar,"// storage occupancy to which the balancing applies. Typically, the balancing \n");
    pChar += rozofs_string_append(pChar,"// stops when all the storages (sid) are included in the window defined by that \n");
    pChar += rozofs_string_append(pChar,"// threshold. \n");
    pChar += rozofs_string_append(pChar,"// See the -t parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_INT_OPT(free_avg_tolerance,10,"0:100");
  }

  REBALANCE_CONFIG_IS_DEFAULT_INT(free_low_threshold,40);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// This parameter defines the free space threshold in percentage before \n");
    pChar += rozofs_string_append(pChar,"// triggering a storage balancing. If the free available space on sid is higher \n");
    pChar += rozofs_string_append(pChar,"// than that threshold, the balancing process stops. \n");
    pChar += rozofs_string_append(pChar,"// See the -a parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_INT_OPT(free_low_threshold,40,"0:100");
  }

  REBALANCE_CONFIG_IS_DEFAULT_INT(frequency,30);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// This option defines the scanning frequency in seconds of the storage balancing \n");
    pChar += rozofs_string_append(pChar,"// process.\n");
    pChar += rozofs_string_append(pChar,"// See the --frequency parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_INT(frequency,30);
  }

  REBALANCE_CONFIG_IS_DEFAULT_LONG(older,-1);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// Exclude files that are more recent than the specified delay. \n");
    pChar += rozofs_string_append(pChar,"// The delay is defined in minutes.\n");
    pChar += rozofs_string_append(pChar,"// See the --olderm parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_LONG(older,-1);
  }

  REBALANCE_CONFIG_IS_DEFAULT_LONG(newer,-1);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// Exclude files that are older than the specified delay. \n");
    pChar += rozofs_string_append(pChar,"// The delay is defined in minutes.\n");
    pChar += rozofs_string_append(pChar,"// See the --newerm parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_LONG(newer,-1);
  }

  REBALANCE_CONFIG_IS_DEFAULT_INT(movecnt,10);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// That option defines the file count threshold before triggering\n");
    pChar += rozofs_string_append(pChar,"// an effective file move. The move occurs when the scan has either \n");
    pChar += rozofs_string_append(pChar,"// reached movesz or movecnt. \n");
    pChar += rozofs_string_append(pChar,"// See the --movecnt parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_INT(movecnt,10);
  }

  REBALANCE_CONFIG_IS_DEFAULT_STRING(movesz,"1G");
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// That option defines the file count threshold before triggering\n");
    pChar += rozofs_string_append(pChar,"// an effective file move. The move occurs when the scan has either \n");
    pChar += rozofs_string_append(pChar,"// reached movesz or movecnt. \n");
    pChar += rozofs_string_append(pChar,"// See the --movesz parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_STRING(movesz,"1G");
  }

  REBALANCE_CONFIG_IS_DEFAULT_INT(throughput,10);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// That option defines the maximun bandwidth in MB/s allocated to\n");
    pChar += rozofs_string_append(pChar,"// the file mover.\n");
    pChar += rozofs_string_append(pChar,"// See the --throughput parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_INT(throughput,10);
  }

  REBALANCE_CONFIG_IS_DEFAULT_STRING(mode,"fid");
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// That option indicates the access mode used by the storage balancer for moving the file:\n");
    pChar += rozofs_string_append(pChar,"// - rel: use relative mode (parent/child)\n");
    pChar += rozofs_string_append(pChar,"// - abs: use full pathname mode\n");
    pChar += rozofs_string_append(pChar,"// - fid: use i-node mode \n");
    REBALANCE_CONFIG_SHOW_STRING(mode,"fid");
  }

  REBALANCE_CONFIG_IS_DEFAULT_BOOL(verbose,False);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// That option when asserted sets the process in verbose mode\n");
    pChar += rozofs_string_append(pChar,"// See --verbose parameter of the CLI.\n");
    REBALANCE_CONFIG_SHOW_BOOL(verbose,False);
  }

  REBALANCE_CONFIG_IS_DEFAULT_LONG(minfilesz,268435456);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// That option gives the minimum size(in bytes) of an eligible file to rebalancing\n");
    REBALANCE_CONFIG_SHOW_LONG(minfilesz,268435456);
  }

  REBALANCE_CONFIG_IS_DEFAULT_LONG(maxfilesz,137438953472);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// That option gives the mximum size(in bytes) of an eligible file to rebalancing\n");
    REBALANCE_CONFIG_SHOW_LONG(maxfilesz,137438953472);
  }

  REBALANCE_CONFIG_IS_DEFAULT_INT(unbalancedNodes,0);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// This indicator may tell that the nodes are unbalanced. So the first SIDs of the new distribution are allocated \n");
    pChar += rozofs_string_append(pChar,"// in size balancing maner, but also respecting collocation constraints. The last unbalancedNodes SIDs are then chosen \n");
    pChar += rozofs_string_append(pChar,"// in size balancing maner, forgetting prior collocation constraints. This enables to balance a 6 node unbalanced cluster.\n");
    REBALANCE_CONFIG_SHOW_INT_OPT(unbalancedNodes,0,"0:2");
  }
  return pChar;
}
/*____________________________________________________________________________________________
**
** Save configuration parameter on disk
** 
** @param pChar   Parameter name
** @param value   New value to set
** 
** @retval 1 on success, 0 else
*/
static inline int rebalance_config_generated_save(char * pChar) {
  char *pBuff;
  int   fd;
  char  saved_file[256];

  /*
  ** Save previous file
  */
  time_t t = time(NULL);
  struct tm tm = *localtime(&t);
  sprintf(saved_file,"%s_%2.2d-%2.2d-%2.2d_%2.2d:%2.2d:%2.2d", rebalance_config_file_name,tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min, tm.tm_sec);
  rename(rebalance_config_file_name,saved_file);

  /*
  ** Creat a new file
  */
  fd = open(rebalance_config_file_name,O_CREAT|O_TRUNC|O_APPEND|O_WRONLY,0777);
  if (fd < 0) {
    pChar += rozofs_string_append_error(pChar,"Can not open ");
    pChar += rozofs_string_append_error(pChar,rebalance_config_file_name);
    return -1;
  }
  pBuff = save_rebalance_config_module_global(myBigBuffer);
  if (write(fd,myBigBuffer,pBuff-myBigBuffer)<0) {
    pChar += rozofs_string_append_error(pChar,"Can not write ");
    pChar += rozofs_string_append_error(pChar,rebalance_config_file_name);
    close(fd);
    return -1;
  }
  pChar += rozofs_string_append(pChar,"Saved in ");
  pChar += rozofs_string_append(pChar,rebalance_config_file_name);
  pChar += rozofs_eol(pChar);
  close(fd);
  return 0;
}
/*____________________________________________________________________________________________
**
** rebalance_config diagnostic function
**
*/
char * rebalance_config_generated_show_all_files(char * pChar) {
  char            cmd[256];

  if (rebalance_config_file_is_read==0) {
    pChar += rozofs_string_append_error(pChar,"Can not read configuration file ");
    return pChar;
  }
  sprintf(cmd,"ls -lisa %s*",rebalance_config_file_name);
  uma_dbg_run_system_cmd(cmd, pChar, uma_dbg_get_buffer_len()); 
  return pChar;
}
/*____________________________________________________________________________________________
**
** rebalance_config diagnostic function
**
*/
void rebalance_config_generated_show(char * argv[], uint32_t tcpRef, void *bufRef) {
char *pChar = uma_dbg_get_buffer();
char *pHead;
int     longformat = 0;
char  * moduleName = NULL;

  if (argv[1] != NULL) {

    if (strcmp(argv[1],"reload")==0) {
      rebalance_config_read(NULL);
      pChar += rozofs_string_append(pChar, "File reloaded\n");
      uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
      return;
    }

    if (strcmp(argv[1],"set")==0) {
      if ((argv[2] == NULL)||(argv[3] == NULL)) {
        pChar += rozofs_string_append_error(pChar, "Missing <parameter> and/or <value>\n");
        uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
        return;
      }
      rebalance_config_generated_set(pChar, argv[2],argv[3]);
      uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
      return;
    }

    if (strcmp(argv[1],"search")==0) {
      if (argv[2] == NULL) {
        pChar += rozofs_string_append_error(pChar, "Missing <parameter>\n");
        uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
        return;
      }
      rebalance_config_generated_search(pChar, argv[2]);
      uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
      return;
    }

    if (strcmp(argv[1],"save")==0) {
      rebalance_config_generated_save(pChar);
      uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
      return;
    }

    if (strcmp(argv[1],"files")==0) {
      rebalance_config_generated_show_all_files(pChar);
      uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
      return;
    }

    if (strcmp(argv[1],"long")==0) {
      longformat = 1;
      moduleName = argv[2];
    }
    else {
      moduleName = argv[1];
      if (argv[2] != NULL) {
        if (strcmp(argv[2],"long")==0) {
          longformat = 1;
        }
      }
    }

    if (moduleName != NULL) {
      if (strcasecmp("global",moduleName)==0) {
        if ((pHead = (char *)ruc_buf_getPayload(bufRef)) == NULL) {
          severe( "ruc_buf_getPayload(%p)", bufRef );
          return;
        }
        /*
        ** Set the command recall string
        */
        pChar = uma_dbg_cmd_recall((UMA_MSGHEADER_S *)pHead);
        if (longformat) {
          pChar = show_rebalance_config_module_global(pChar);
        } else {
          pChar = show_rebalance_config_module_global_short(pChar);
        } 
        uma_dbg_send_buffer(tcpRef, bufRef, pChar-pHead, TRUE);
        return;
      }
      else {
        pChar += rozofs_string_append_error(pChar, "Unexpected configuration scope\n");
        uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
        return;
      }
    }
  }

  if ((pHead = (char *)ruc_buf_getPayload(bufRef)) == NULL) {
    severe( "ruc_buf_getPayload(%p)", bufRef );
    return;
  }
  /*
  ** Set the command recall string
  */
  pChar = uma_dbg_cmd_recall((UMA_MSGHEADER_S *)pHead);
  if (rebalance_config_file_is_read==0) {
    pChar += rozofs_string_append_error(pChar,"Can not read configuration file ");
  }
  
  
  if (longformat) {
    pChar = show_rebalance_config_module_global(pChar);
  } else {
    pChar = show_rebalance_config_module_global_short(pChar);
  } 
  uma_dbg_send_buffer(tcpRef, bufRef, pChar-pHead, FALSE);
  
  bufRef = uma_dbg_get_new_buffer(tcpRef);
  if (bufRef == NULL) {
    warning( "uma_dbg_get_new_buffer() Buffer depletion");
    return;
  }
  if ((pHead = (char *)ruc_buf_getPayload(bufRef)) == NULL) {
    severe( "ruc_buf_getPayload(%p)", bufRef );
    return;
  }
  pChar = pHead+sizeof(UMA_MSGHEADER_S);
  *pChar = 0;
  pChar += rozofs_string_append(pChar,"#____________________________________________________________\n");
  pChar += rozofs_string_append(pChar,"# ");
  pChar += rozofs_string_append(pChar," rebalance_config file is ");
  pChar += rozofs_string_append(pChar,rebalance_config_file_name);
  pChar += rozofs_string_append(pChar,"\n#____________________________________________________________\n\n");
  uma_dbg_send_buffer(tcpRef, bufRef, pChar-pHead, TRUE);
  return;
}
/*____________________________________________________________________________________________
**
** Check the presence of the configuration file
** 
** @param fname   Configuration file of NULL (use default)
**
** @retval  0 if it exist, -1 else
*/
int rebalance_config_does_file_exist(char * fname) {

  if (fname == NULL) {
    strcpy(rebalance_config_file_name,ROZOFS_CONFIG_DIR"/rebalance.conf");
  }
  else {
    strcpy(rebalance_config_file_name,fname); 
  } 

  if (access(rebalance_config_file_name,R_OK)!=0) {
    return -1;
  }
  return 0;
}

/*____________________________________________________________________________________________
**
** Read the configuration file
*/
static inline void rebalance_config_generated_read(char * fname) {
  config_t          cfg; 

  if (rebalance_config_file_is_read == 0) {
    uma_dbg_addTopicAndMan("rebalanceconf",show_rebalance_config, man_rebalance_config, 0);
  }

  if (rebalance_config_does_file_exist(fname) != 0) {
    printf("cant access %s: %s.", rebalance_config_file_name, strerror(errno));
    fatal("cant access %s: %s.", rebalance_config_file_name, strerror(errno));
  }

  config_init(&cfg);
  rebalance_config_file_is_read = 1;
  if (config_read_file(&cfg, rebalance_config_file_name) == CONFIG_FALSE) {
    if (errno == ENOENT) {
      info("Missing file %s.", rebalance_config_file_name);
    }
    else {
      severe("cant read %s: %s (line %d).", rebalance_config_file_name, config_error_text(&cfg),config_error_line(&cfg));
    }
    rebalance_config_file_is_read = 0;
  }

  /*
  ** global scope configuration parameters
  */
  // This parameter defines the threshold in percentage around the average  
  // storage occupancy to which the balancing applies. Typically, the balancing  
  // stops when all the storages (sid) are included in the window defined by that  
  // threshold.  
  // See the -t parameter of the CLI. 
  REBALANCE_CONFIG_READ_INT_MINMAX(free_avg_tolerance,10,0,100);
  // This parameter defines the free space threshold in percentage before  
  // triggering a storage balancing. If the free available space on sid is higher  
  // than that threshold, the balancing process stops.  
  // See the -a parameter of the CLI. 
  REBALANCE_CONFIG_READ_INT_MINMAX(free_low_threshold,40,0,100);
  // This option defines the scanning frequency in seconds of the storage balancing  
  // process. 
  // See the --frequency parameter of the CLI. 
  REBALANCE_CONFIG_READ_INT(frequency,30);
  // Exclude files that are more recent than the specified delay.  
  // The delay is defined in minutes. 
  // See the --olderm parameter of the CLI. 
  REBALANCE_CONFIG_READ_LONG(older,-1);
  // Exclude files that are older than the specified delay.  
  // The delay is defined in minutes. 
  // See the --newerm parameter of the CLI. 
  REBALANCE_CONFIG_READ_LONG(newer,-1);
  // That option defines the file count threshold before triggering 
  // an effective file move. The move occurs when the scan has either  
  // reached movesz or movecnt.  
  // See the --movecnt parameter of the CLI. 
  REBALANCE_CONFIG_READ_INT(movecnt,10);
  // That option defines the file count threshold before triggering 
  // an effective file move. The move occurs when the scan has either  
  // reached movesz or movecnt.  
  // See the --movesz parameter of the CLI. 
  REBALANCE_CONFIG_READ_STRING(movesz,"1G");
  // That option defines the maximun bandwidth in MB/s allocated to 
  // the file mover. 
  // See the --throughput parameter of the CLI. 
  REBALANCE_CONFIG_READ_INT(throughput,10);
  // That option indicates the access mode used by the storage balancer for moving the file: 
  // - rel: use relative mode (parent/child) 
  // - abs: use full pathname mode 
  // - fid: use i-node mode  
  REBALANCE_CONFIG_READ_STRING(mode,"fid");
  // That option when asserted sets the process in verbose mode 
  // See --verbose parameter of the CLI. 
  REBALANCE_CONFIG_READ_BOOL(verbose,False);
  // That option gives the minimum size(in bytes) of an eligible file to rebalancing 
  REBALANCE_CONFIG_READ_LONG(minfilesz,268435456);
  // That option gives the mximum size(in bytes) of an eligible file to rebalancing 
  REBALANCE_CONFIG_READ_LONG(maxfilesz,137438953472);
  // This indicator may tell that the nodes are unbalanced. So the first SIDs of the new distribution are allocated  
  // in size balancing maner, but also respecting collocation constraints. The last unbalancedNodes SIDs are then chosen  
  // in size balancing maner, forgetting prior collocation constraints. This enables to balance a 6 node unbalanced cluster. 
  REBALANCE_CONFIG_READ_INT_MINMAX(unbalancedNodes,0,0,2);
 
  config_destroy(&cfg);
}
#endif
