#ifndef __rozofs_scan_keyw_e2String_h__
#define __rozofs_scan_keyw_e2String_h__
#ifdef __cplusplus
extern "C" {
#endif /*__cplusplus*/
#include <strings.h>

/*___________________________________________________________________
 
   Generated by enum2String.py 
   Date : Wednesday 2020 October 28, 18:45:22
   Command line : 
 ../../tools/enum2String.py -n rozofs_scan_keyw_e -f rozo_scan_by_criteria.c -c 17

  ____________________________________________________________________
*/

/*_________________________________________________________________
 * Builds a string from an integer value supposed to be within
 * the enumerated list rozofs_scan_keyw_e
 *
 * @param x : value from rozofs_scan_keyw_e to translate into a string
 *
 * The input value is translated into a string deduced from the enum
 * definition. When the input value do not fit any of the predefined
 * values, "??" is returned
 *
 * @return A char pointer to the constant string or "??"
 *_________________________________________________________________*/ 
static inline char * rozofs_scan_keyw_e2String (const rozofs_scan_keyw_e x) {
  switch(x) {
    case rozofs_scan_keyw_criteria_min           : return("criteria min");
    case rozofs_scan_keyw_criteria_has_write_error: return("criteria has write error");
    case rozofs_scan_keyw_criteria_is_in_trash   : return("criteria is in trash");
    case rozofs_scan_keyw_criteria_not_in_trash  : return("criteria not in trash");
    case rozofs_scan_keyw_criteria_has_xattr     : return("criteria has xattr");
    case rozofs_scan_keyw_criteria_has_no_xattr  : return("criteria has no xattr");
    case rozofs_scan_keyw_criteria_priv_user_x   : return("criteria priv user x");
    case rozofs_scan_keyw_criteria_priv_user_not_x: return("criteria priv user not x");
    case rozofs_scan_keyw_criteria_priv_user_w   : return("criteria priv user w");
    case rozofs_scan_keyw_criteria_priv_user_not_w: return("criteria priv user not w");
    case rozofs_scan_keyw_criteria_priv_user_r   : return("criteria priv user r");
    case rozofs_scan_keyw_criteria_priv_user_not_r: return("criteria priv user not r");
    case rozofs_scan_keyw_criteria_priv_group_x  : return("criteria priv group x");
    case rozofs_scan_keyw_criteria_priv_group_not_x: return("criteria priv group not x");
    case rozofs_scan_keyw_criteria_priv_group_w  : return("criteria priv group w");
    case rozofs_scan_keyw_criteria_priv_group_not_w: return("criteria priv group not w");
    case rozofs_scan_keyw_criteria_priv_group_r  : return("criteria priv group r");
    case rozofs_scan_keyw_criteria_priv_group_not_r: return("criteria priv group not r");
    case rozofs_scan_keyw_criteria_priv_other_x  : return("criteria priv other x");
    case rozofs_scan_keyw_criteria_priv_other_not_x: return("criteria priv other not x");
    case rozofs_scan_keyw_criteria_priv_other_w  : return("criteria priv other w");
    case rozofs_scan_keyw_criteria_priv_other_not_w: return("criteria priv other not w");
    case rozofs_scan_keyw_criteria_priv_other_r  : return("criteria priv other r");
    case rozofs_scan_keyw_criteria_priv_other_not_r: return("criteria priv other not r");
    case rozofs_scan_keyw_criteria_is_hybrid     : return("criteria is hybrid");
    case rozofs_scan_keyw_criteria_is_not_hybrid : return("criteria is not hybrid");
    case rozofs_scan_keyw_criteria_is_aging      : return("criteria is aging");
    case rozofs_scan_keyw_criteria_is_not_aging  : return("criteria is not aging");
    case rozofs_scan_keyw_criteria_sgid          : return("criteria sgid");
    case rozofs_scan_keyw_criteria_suid          : return("criteria suid");
    case rozofs_scan_keyw_criteria_sticky        : return("criteria sticky");
    case rozofs_scan_keyw_criteria_pflock        : return("criteria pflock");
    case rozofs_scan_keyw_criteria_vfast         : return("criteria vfast");
    case rozofs_scan_keyw_criteria_vslow         : return("criteria vslow");
    case rozofs_scan_keyw_criteria_max           : return("criteria max");
    case rozofs_scan_keyw_field_min              : return("field min");
    case rozofs_scan_keyw_field_fid              : return("field fid");
    case rozofs_scan_keyw_field_pfid             : return("field pfid");
    case rozofs_scan_keyw_field_fname            : return("field fname");
    case rozofs_scan_keyw_field_cr8time          : return("field cr8time");
    case rozofs_scan_keyw_field_mtime            : return("field mtime");
    case rozofs_scan_keyw_field_ctime            : return("field ctime");
    case rozofs_scan_keyw_field_atime            : return("field atime");
    case rozofs_scan_keyw_field_update_time      : return("field update time");
    case rozofs_scan_keyw_field_size             : return("field size");
    case rozofs_scan_keyw_field_uid              : return("field uid");
    case rozofs_scan_keyw_field_gid              : return("field gid");
    case rozofs_scan_keyw_field_slave            : return("field slave");
    case rozofs_scan_keyw_field_nlink            : return("field nlink");
    case rozofs_scan_keyw_field_deleted          : return("field deleted");
    case rozofs_scan_keyw_field_children         : return("field children");
    case rozofs_scan_keyw_field_project          : return("field project");
    case rozofs_scan_keyw_field_parent           : return("field parent");
    case rozofs_scan_keyw_field_pdname           : return("field pdname");
    case rozofs_scan_keyw_field_lname            : return("field lname");
    case rozofs_scan_keyw_field_cid              : return("field cid");
    case rozofs_scan_keyw_field_sid              : return("field sid");
    case rozofs_scan_keyw_field_sidrange         : return("field sidrange");
    case rozofs_scan_keyw_field_xname            : return("field xname");
    case rozofs_scan_keyw_field_max              : return("field max");
    case rozofs_scan_keyw_comparator_min         : return("comparator min");
    case rozofs_scan_keyw_comparator_lt          : return("comparator lt");
    case rozofs_scan_keyw_comparator_le          : return("comparator le");
    case rozofs_scan_keyw_comparator_eq          : return("comparator eq");
    case rozofs_scan_keyw_comparator_ge          : return("comparator ge");
    case rozofs_scan_keyw_comparator_gt          : return("comparator gt");
    case rozofs_scan_keyw_comparator_ne          : return("comparator ne");
    case rozofs_scan_keyw_comparator_regex       : return("comparator regex");
    case rozofs_scan_keyw_comparator_max         : return("comparator max");
    case rozofs_scan_keyw_separator_open         : return("separator open");
    case rozofs_scan_keyw_separator_close        : return("separator close");
    case rozofs_scan_keyw_operator_or            : return("operator or");
    case rozofs_scan_keyw_operator_and           : return("operator and");
    case rozofs_scan_keyw_operator_not           : return("operator not");
    case rozofs_scan_keyw_option_skipdate        : return("option skipdate");
    case rozofs_scan_keyw_option_help            : return("option help");
    case rozofs_scan_keyw_option_verbose         : return("option verbose");
    case rozofs_scan_keyw_option_vverbose        : return("option vverbose");
    case rozofs_scan_keyw_scope_junk             : return("scope junk");
    case rozofs_scan_keyw_scope_dir              : return("scope dir");
    case rozofs_scan_keyw_scope_slink            : return("scope slink");
    case rozofs_scan_keyw_argument_output        : return("argument output");
    case rozofs_scan_keyw_argument_eid           : return("argument eid");
    case rozofs_scan_keyw_argument_config        : return("argument config");
    case rozofs_scan_keyw_input_end              : return("input end");
    case rozofs_scan_keyw_input_error            : return("input error");
    /* Unexpected value */
    default: return "??";
  }
}

#ifdef	__cplusplus
}
#endif
#endif

