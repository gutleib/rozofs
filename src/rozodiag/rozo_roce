#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (c) 2010 Fizians SAS. <http://www.fizians.com>
# This file is part of Rozofs.
#
# Rozofs is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 2.
#
# Rozofs is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
import sys
import os.path
import subprocess
import time
import re
import shlex
import datetime
import shutil

BLUE='\033[94m\033[40m'
UBBLUE='\033[1;4;94m\033[40m'
NORMAL='\033[0m'
BOLD='\033[1m'
CYAN='\033[96m\033[40m'
YELLOW='\033[93m\033[40m'

ib_devices = []

from optparse import OptionParser

#______________________  
def read_string_file(path):
  if os.path.exists(path):
    try:
      f = open(path,"r")
      val = f.read()
      f.close()
      return val.strip()
    except:
      return "error reading %s"%(path)
  return "%s does not exist"%(path)          
#______________________  
def read_int_file(path):
  val = read_string_file(path)
  try:
    return int(val)
  except:
    return -1
#______________________  
class rozo_roce_port:
  def __init__(self,port_num,path):
    global options
    self.port_path  = path
    self.port_num   = port_num
    if options.track == None: return
    self.counter = []
    for counter in options.track: self.counter.append(int(0))
    self.delta_counter = []
    for counter in options.track: self.delta_counter.append(int(0))
    self.update_counters()

  def update_counters(self):
    global options
    idx = int(0)
    for counter in options.track:
      fname="%s/counters/%s"%(self.port_path,counter)
      if not os.path.exists(fname):
        fname="%s/hw_counters/%s"%(self.port_path,counter)
        if not os.path.exists(fname):
          print "counter %s not found !!!"%(counter)
          sys.exit(1)
      val = read_int_file(fname)
      self.delta_counter[idx] = val - self.counter[idx]
      self.counter[idx]       = val    
      idx = idx + int(1)    
    
#______________________  
class rozo_roce_device:

  def __init__(self,name):
    self.name = name
    self.nb_ports = int(0)
    self.ports = []
    ib_devices.append(self)

  def add_port(self,port):
    self.nb_ports = self.nb_ports + int(1)
    path = "/sys/class/infiniband/%s/ports/%s/"%(self.name,port)
    roce_port = rozo_roce_port(port,path)
    self.ports.append(roce_port)

#______________________  
def rozo_roce_track():
  global ib_devices

  while True: 
    LINE = CYAN
    for counter in options.track:
      LINE = LINE + "| %-12s "%(counter[0:12])          
    LINE = LINE + '|'
    print LINE
    LINE = CYAN
    for counter in options.track:
      LINE = LINE + "| %-12s "%(counter[12:24])          
    LINE = LINE + '|'
    print LINE

    for i in range (0,30):    
      time.sleep(1) 

      LINE =  NORMAL
      for ib_device in ib_devices:
        for port in ib_device.ports:
          port.update_counters()
          
      idx = 0    
      for counter in options.track:
        val = int(0)
        delta = int(0)
        for ib_device in ib_devices:
          for port in ib_device.ports:
            val   = val   + port.counter[idx]
            delta = delta + port.delta_counter[idx]
        LINE = LINE + "| %12s "%(delta)            
        idx = idx + 1                                        
      LINE = LINE + '|'
      print LINE
 
#______________________  
def rozo_roce_counters():
  global ib_devices

  print "{ \"IB devices\" : ["
  first_device = True
  for ib_device in ib_devices:
    if first_device == True:
      print "    { \"device name\" : \"%s\","%(ib_device.name) 
      first_device = False
    else:
      print "   ,{ \"device name\" : \"%s\","%(ib_device.name)  
    numa_node = read_string_file("/sys/class/infiniband/%s/device/numa_node"%(ib_device.name))
    board_id = read_string_file("/sys/class/infiniband/%s/board_id"%(ib_device.name))
    fw_ver   = read_string_file("/sys/class/infiniband/%s/fw_ver"%(ib_device.name))
    hca_type = read_string_file("/sys/class/infiniband/%s/hca_type"%(ib_device.name))
    hw_rev   = read_string_file("/sys/class/infiniband/%s/hw_rev"%(ib_device.name))
    print "      \"numa node\"   : \"%s\","%(numa_node)  
    print "      \"id\"          : \"%s\","%(board_id)  
    print "      \"fw\"          : \"%s\","%(fw_ver)  
    print "      \"type\"        : \"%s\","%(hca_type)  
    print "      \"revision\"    : \"%s\","%(hw_rev)  
    print "      \"ports\"       : ["
    first_port = True
    for port in ib_device.ports:
      link_layer   = read_string_file("%s/link_layer"%(port.port_path))
      phys_state   = read_string_file("%s/phys_state"%(port.port_path))
      rate         = read_string_file("%s/rate"%(port.port_path))
      if first_port == True:
        print "         { \"port number\" : %s"%(port.port_num) 
        first_port = False
      else:
        print "          ,{  \"port number\" : %s,"%(port.port_num) 
      print "           \"link\"        : \"%s\","%(link_layer)            
      print "           \"state\"       : \"%s\","%(phys_state)            
      print "           \"rate\"        : \"%s\""%(rate)            
      for f in sorted(os.listdir("%s/counters/"%(port.port_path))):
        val  = read_int_file("%s/counters/%s"%(port.port_path,f))
        name = "\"%s\""%(f)
        print "            ,%35s : %s"%(name,val)
      for f in sorted(os.listdir("%s/hw_counters/"%(port.port_path))):
        val  = read_int_file("%s/hw_counters/%s"%(port.port_path,f))
        name = "\"%s\""%(f)
        print "            ,%35s : %s"%(name,val)
      print "         }"
    print "      ]"
    print "    }"
  print "]}"   
  
#______________________  
def rozo_man():
  print "RozoFS utility to dump/track IB counters"
  print "Usage:"
  print BOLD + " rozo_roce -c,--counters " + NORMAL + " Display all IB devices counters." 
  print BOLD + " rozo_roce -t <counter1> ... -t <counterN>" + NORMAL + "Track IB devices ports counters." 
  sys.exit(0)
    
parser = OptionParser()
parser.add_option("-c","--counters", action="store_true",default=False, dest="counters", help="Display IB devices counters.")
parser.add_option("-t","--track", action="append",type="string", dest="track", help="IB counter to track.")

(options, args) = parser.parse_args()

#
# Make the list of devices
#
if not os.path.exists("/sys/class/infiniband/"):
  print "Roce is not installed"
  sys.exit(-1)

for devName in os.listdir("/sys/class/infiniband/"):
  ib_device = rozo_roce_device(devName)
  for port in os.listdir("/sys/class/infiniband/%s/ports/"%(devName)):
    ib_device.add_port(port)

if options.counters:
  rozo_roce_counters()
elif options.track == None:
  rozo_man()
else:
  rozo_roce_track()

