#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (c) 2010 Fizians SAS. <http://www.fizians.com>
# This file is part of Rozofs.
#
# Rozofs is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 2.
#
# Rozofs is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
import sys
import os.path
import subprocess
import time
import re
import shlex
from optparse import OptionParser
import syslog
import glob



#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys

red = '\033[91m'
green = '\033[92m'
yellow = '\033[93m'
blue = '\033[94m'
purple = '\033[95m'
cyan = '\033[96m'
white = '\033[97m'
endeffect = '\033[0m'
bold = '\033[1m'
underline = '\033[4m'
blink = '\033[5m'
reverse = '\033[7m'
ORANGE='\033[33m\033[40m'


rozo_device_list = []
newlsblk = False

#_______________________________________________
class constants:

  def joined_column(self): return "#Zis_IZ_a_JoInED_ColUMn"
  
#_______________________________________________
class column_desc:

  def __init__(self,shift):  
    self.column_nb    = 0
    self.column_sizes = []
    self.shift        = shift
     
  def update_column(self, num, size):
  
    # Column number extension
    if int(num) > self.column_nb:
      for i in range(self.column_nb,num):
        self.column_sizes.append('0')
      self.column_nb = num 	
	
    # Column size extension
    if int(self.column_sizes[int(num)-1]) < int(size):
      self.column_sizes[int(num)-1] = int(size)

    
#_______________________________________________
class big_title:

  def __init__(self,text,effect=None):  
    self.text   = text
    self.effect = effect

  def display(self,column_desc):
    l=0
    for col in range(column_desc.column_nb):
      l += (column_desc.column_sizes[col]+3)
    l -= (len(self.text) +3)
    
    line = ''    
    for i in range(int(column_desc.shift)): line+=' '		
    line+="| "
    start = int(l)/2
    end   = int(l)-start
    
    if self.effect != None:
      line+=self.effect+bold+reverse
    for i in range(start): line+=" "
    line+=self.text
    for i in range(end): line+=" " 
    if self.effect != None:
      line+=endeffect
    line+=" |"   
    print line  
#_______________________________________________
class separator_line:

  def __init__(self,extreme,separator,previous_line=None):  
    self.extreme    = extreme  
    self.separator  = separator
    self.separators = []
    if previous_line == None: return
      
    const = constants()    
    self.separators.append(extreme)
    skip=True
    for col in previous_line.column:
      if skip==True: 
        skip=False
	continue
      if col == const.joined_column(): self.separators.append('_')
      else:                            self.separators.append(separator)
    self.separators.append(extreme) 
    
  def display(self,column_desc):

    const = constants()
    line = ''    
    for i in range(int(column_desc.shift)): line+=' '
    
    if len(self.separators) != 0:
      for c in range(column_desc.column_nb):
	line += self.separators[c]
	line+='_'	
	for ci in range(int(column_desc.column_sizes[c])): line+='_'	
	line+='_' 
      line+=self.extreme 
      print line
      return       
    
    first=True
    for c in range(column_desc.column_nb):
      if first == True:
        # 1rst line begins with extreme separator
        first = False
	line += self.extreme
      else:	
        # Not a fisrt line
	line += self.separator
      line+='_'	
      for ci in range(int(column_desc.column_sizes[c])): line+='_'	
      line+='_' 
    line+=self.extreme   
    print line    
#_______________________________________________
class display_element:

  def __init__(self,value,effect=None):  
    self.value  = value 
    self.effect = effect
     

#_______________________________________________
class display_line:

  def __init__(self,centered=False):  
    self.column     = []   
    self.centered   = centered
      
  def set_column(self,column,value,effect=None):
    # Extend column number
    if int(column) > len(self.column):
      for i in range(len(self.column),int(column)):
        self.column.append(display_element(''))
    self.column[int(column)-1] = display_element(value,effect)

  def check_column(self,column,value):
    # Extend column number
    if int(column) > len(self.column): return False
    if self.column[int(column)-1].value == value: return True
    return False
    
  # Join a colum with its preceding column  
  def join_preceding_column(self,column):
    const = constants()
    # Extend column number
    if int(column) > len(self.column):
      for i in range(len(self.column),int(column)):
        self.column.append(display_element(''))
    self.column[int(column)-1] = display_element(const.joined_column())

  def display(self,column_desc):
    const = constants()
    line=''	
    for i in range(int(column_desc.shift)): line+=' '		
    line+="| "
    for col in range(column_desc.column_nb):
    
      try:     elt=self.column[col]
      except:  elt=display_element('')	
      
      val = elt.value
      eff = elt.effect
      
      if val == const.joined_column(): continue

      l = column_desc.column_sizes[col]-len(val)
      joined = 0
      for jc in range(col+1,column_desc.column_nb):
        try:    next = self.column[jc].value
	except: next = ''
        if next != const.joined_column(): break
	l += column_desc.column_sizes[jc]+3
	joined += 1	
      if self.centered == True:
	start = int(l)/2
	end   = int(l)-start
      else:
	try:
	  float(val)	  
          start=l
	  end=0
	except:
	  start = 0
	  end = l
          
      if eff != None: line+=eff
      for i in range(start): line+=" "
      line+=val
      for i in range(end): line+=" " 
      if eff != None: line+=endeffect
      line+=" | "  
      col+=joined 
    print line
        
#_______________________________________________
class adaptative_tbl:

  def __init__(self, shift, title=None,effect=None):  
    self.row_nb      = int(0)
    self.row         = [] 
    self.current_row = None 
    self.column_desc = column_desc(shift)   
    if title == None: 
      self.separator(' ',' ')      
    else:
      self.separator(' ','_')
      self.row.append(big_title(title,effect)) 
      self.row_nb += 1
      self.separator('|','_')
    
  def add_line(self,centered):
    line = display_line(centered)
    self.row.append(line) 
    self.row_nb += 1
    self.current_row = line
    
  def new_line(self):    self.add_line(False)
  def new_center_line(self): self.add_line(True)
  
  def separator(self,extreme,separator):
    self.row.append(separator_line(extreme,separator,self.current_row)) 
    self.row_nb = int(self.row_nb)+1
    self.current_row = None
            
  def end_separator(self): self.separator('|','|')	 
         
  def set_column(self,column,value,effect=None):
    self.current_row.set_column(column,value,effect)
    self.column_desc.update_column(column,len(value))      

  def join_preceding_column(self,column):
    self.current_row.join_preceding_column(column)
                	
  def display(self):
    # Must we add and end separator ?
    if self.current_row != None: self.end_separator()  
    for row in range(int(self.row_nb)):              
      self.row[row].display(self.column_desc)
      previous_line=self.row[row]


#_____________________________________________  
#
# Device class
#
def find_dev(dev):
  for d in rozo_device_list:
    if d.dev == dev: return d
  return None
    
class rozo_device:

  def __init__(self,dev,size,fs,mount,label,uuid,model,scheduler,rota,ra,slot):
    self.dev   = dev
    self.size  = size
    self.fs    = fs
    self.mount = mount
    self.label = label
    self.uuid  = uuid
    self.model = model
    self.scheduler = scheduler
    self.rota  = rota
    self.ra    = ra
    self.slot  = slot
    #
    # Insert in the list
    #
    idx = -1
    for d in rozo_device_list:
      idx = idx + 1
      if d.label < label: continue
      if d.label > label: 
        rozo_device_list.insert(idx,self)  
        break
      if d.uuid < uuid: continue
      if d.uuid > uuid:
        rozo_device_list.insert(idx,self)  
        break
      if d.mount == "" :
        rozo_device_list.insert(idx,self)  
        break          
    if idx == len(rozo_device_list)-1:           
      rozo_device_list.append(self)       
    
  def update(self,size,fs,mount,label,uuid,model,scheduler,rota,ra,slot):  
    self.size  = size
    self.fs    = fs
    self.mount = mount
    self.label = label
    self.uuid  = uuid
    self.model = model
    self.scheduler = scheduler
    self.rota  = rota
    self.ra    = ra
    if slot != "" : self.slot = slot
     
#_____________________________________________  
#
# Device list
#
def list_devices():
  # List every block device and find out a specific one
  if newlsblk == False:
    string="lsblk -Pno KNAME,LABEL,FSTYPE,MOUNTPOINT,SCHED,MODEL,ROTA,SIZE,UUID "
  else:
    string="lsblk -Pno KNAME,LABEL,FSTYPE,MOUNTPOINT,SCHED,MODEL,ROTA,SIZE,UUID,VENDOR,RA -x LABEL"
  parsed = shlex.split(string)
  cmd = subprocess.Popen(parsed, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  for line in cmd.stdout:

    device = line.split('"')[1].strip()
     
    try: 
      slot = ""
      for slotPath in glob.glob("/sys/class/block/%s/device/enclosure_device:*"%(device)):
        slot = slotPath.split('enclosure_device:')[1].rstrip()
        break;
    except:
      continue            
            
    label     = line.split('"')[3].strip()
    fs         = line.split('"')[5].strip()
    mountpoint = line.split('"')[7].strip()  
    scheduler  = line.split('"')[9].strip()
    model      = line.split('"')[11].strip()
    if model == "": model ="?"
    rota       = line.split('"')[13].strip()
    if rota == "1": rota = "Yes"
    size       = line.split('"')[15].strip()      
    uuid       = line.split('"')[17].strip()
      
    if len(line.split('"')) < int(21):
      vendor= "?"
      ra = ""
    else:
      vendor     = line.split('"')[19].strip()
      if vendor == "": vendor ="?" 
      ra        = line.split('"')[21].strip()
      
         
    d = find_dev(device)
    if d == None:
      rozo_device(device,size,fs,mountpoint,label,uuid,model+'['+vendor+']',scheduler,rota,ra,slot)
    else:
      d.update(size,fs,mountpoint,label,uuid,model+'['+vendor+']',scheduler,rota,ra,slot)
         
#_____________________________________________  
#
# Return device, fs type as well as mountpoint
# associated to a device when these data are 
# meaningfull
#
def rozo_list_all_block_devices(blockDev=None) :

  list_devices()
  previous_uuid="UNKNOWN"
    
  # Create a display array
  d = adaptative_tbl(2,"RozoFS %d block devices"%(len(rozo_device_list)),cyan+bold) 
  d.new_center_line()
  color = blue+reverse+bold
  idx = 0
  
  idx += 1
  d.set_column(idx,"Dev",color)
  idx += 1
  d.set_column(idx,"size",color)
  idx += 1
  d.set_column(idx,"FS",color)      
  idx += 1
  d.set_column(idx,"Slot",color)      
  idx += 1
  d.set_column(idx,"Mount",color)
  idx += 1
  d.set_column(idx,"Label",color)
  idx += 1
  d.set_column(idx,"Model[Vendor]",color)
  idx += 1
  d.set_column(idx,"Sch",color)
  idx += 1
  d.set_column(idx,"Rota",color)
  idx += 1
  d.set_column(idx,"R.A",color)
  d.end_separator()   
  for dev in  rozo_device_list:

    if blockDev != None:
      if blockDev != dev.device:
        continue
      
    if dev.uuid == previous_uuid: 
      color = ORANGE 
      size  = ""
      fs    = ""
      label = ""
    else:
      color = None
      size  = dev.size
      fs    = dev.fs
      label = dev.label
      
    if dev.uuid == "":
       previous_uuid="UNKNOWN"
    else:      
      previous_uuid = dev.uuid        
         
    d.new_line()
    idx = 0
  
    idx += 1
    d.set_column(idx,dev.dev,color)  
    idx += 1
    d.set_column(idx,size,None)   
    idx += 1
    d.set_column(idx,fs,None)
    idx += 1
    d.set_column(idx,dev.slot,None)   
    idx += 1
    d.set_column(idx,dev.mount,None)   
    idx += 1
    d.set_column(idx,label,None)  
    idx += 1
    d.set_column(idx,dev.model,color)   
    idx += 1
    d.set_column(idx,dev.scheduler,color)   
    idx += 1
    d.set_column(idx,dev.rota,color)   
    idx += 1
    d.set_column(idx,dev.ra,color)   
    
  d.display() 

#_____________________________________________  
#
# List one block device
#
def rozo_list_some_block_device(blockDev) :
  global newlsblk
  
  # List every block device and find out a specific one
  for b in blockDev:
  

    # Create a display array
    d = adaptative_tbl(2,"%s device"%(b)) 
    d.new_center_line()
    d.set_column(1,"Name")
    d.set_column(2,"Value")
    d.end_separator()  
    if newlsblk == True:
      string="lsblk -PO /dev/%s"%(b)
    else:
      string = "lsblk -Po KNAME,LABEL,FSTYPE,MOUNTPOINT,SCHED,MODEL,ROTA,SIZE,UUID /dev/%s"%(b)
    parsed = shlex.split(string)
    cmd = subprocess.Popen(parsed, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    for line in cmd.stdout:
       
      sp = line.split('" ')    
      for pair in sp:
        name   = pair.split('=')[0]
        value  = pair.split('"')[1]
        d.new_line()
        d.set_column(1,name)  
        d.set_column(2,value) 
    d.display()       
    rozo_list_tune_parameters(b)         

#_____________________________________________  
#
# Light a led device on/off
#
def rozo_led_device(blockDev,status="get"):
  for b in blockDev:
    string="/sys/class/enclosure/*/*/device/block/%s"%(b)
    if len(glob.glob(string)) == 0:
      print("%s not found in any enclosure"%(b))
    for F in glob.glob(string):
      if status == "get" :
        os.system("cat %s"%(F))
      elif status == "on" :
        os.system("echo 1 > %s"%(status,F))
      elif status == "off" :
        os.system("echo 0 > %s"%(status,F))
      else:
        print "No such value %s"%(status)
#_____________________________________________  
#
# Return device, fs type as well as mountpoint
# associated to a device when these data are 
# meaningfull
#
def rozo_get_block_devices(dev) :
  
  # List every block device and find out a specific one
  string="lsblk -Pno KNAME,FSTYPE,MOUNTPOINT"
  parsed = shlex.split(string)
  cmd = subprocess.Popen(parsed, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  for line in cmd.stdout:
    device = line.split('"')[1] 
    if device == dev:
      fstype = line.split('"')[3]   
      if fstype == "": fstype = None
      mountpoint = line.split('"')[5]
      if mountpoint == "": mountpoint = None
      return device, fstype, mountpoint
      break
  return None, None, None
  
#_____________________________________________  
#
# Tune a SSD device
#
def rozo_tune_ssd_devices(blockdev, nr_requests=None) :

  for b in blockdev:
    path = "/sys/block/%s/queue"%(b)
    if not os.path.exists(path):
      print "%s do not exists. Can not tune it !!!"
      return 1

    string = "echo noop > %s/scheduler"%(path)
    os.system(string)

    time.sleep(1)

    string = "echo 0 > %s/rotational"%(path)
    os.system(string)

    if nr_requests == None: nr_requests = "32" 
    string = "echo %s > %s/nr_requests"%(nr_requests,path)
    os.system(string)

    string = "echo 1 > %s/nomerges"%(path)
    os.system(string)

    rozo_list_tune_parameters(b)  
  return 0  

#_____________________________________________  
#
# Tune a HDDD device
#
def rozo_tune_hdd_devices(blockdev,nr_requests=None,read_expire=None,write_expire=None,fifo_batch=None,read_ahead_kb=None) :

  for b in blockdev: 
    path = "/sys/block/%s/queue"%(b)
    if not os.path.exists(path):
      print "%s do not exists. Can not tune it !!!"
      return 1

    string = "echo deadline > %s/scheduler"%(path)
    os.system(string)

    time.sleep(1)

    string = "echo 1 > %s/rotational"%(path)
    os.system(string)

    if nr_requests == None: nr_requests = "32" 
    string = "echo %s > %s/nr_requests"%(nr_requests,path)
    os.system(string)

    string = "echo 1 > %s/iosched/front_merges"%(path)
    os.system(string)

    if read_expire == None: read_expire = "150"
    string = "echo %s > %s/iosched/read_expire"%(read_expire,path)
    os.system(string)

    if write_expire == None: write_expire = "1500"
    string = "echo %s > %s/iosched/write_expire"%(write_expire,path)
    os.system(string)

    if fifo_batch == None: fifo_batch = "16"
    string = "echo %s > %s/iosched/fifo_batch"%(fifo_batch,path)  
    os.system(string)

    if read_ahead_kb == None: read_ahead_kb = "768"
    string = "echo %s > %s/read_ahead_kb"%(read_ahead_kb,path)
    os.system(string)

    string = "echo 0 > %s/nomerges"%(path)
    os.system(string)

    rozo_list_tune_parameters(b)  
  return 0  
#_____________________________________________  
#
# Display a configuration file
#
def rozo_print_file(d, file):

  d.new_line()
  d.set_column(1,file)  

  if not os.path.exists(file):
    d.set_column(2,"No such file") 
    return None
    
  try :
    f = open(file,"r")
  except:
    d.set_column(2,"Can not open") 
    return None
  
  val = f.read().rstrip()   
  d.set_column(2,val) 
  return val
#_____________________________________________  
#
# Display disk tuning
#  
def rozo_list_tune_parameters(blockdev) :

  if blockdev == None: return
  
  path = "/sys/block/%s/queue"%(blockdev)
  if not os.path.exists(path):
    print "%s do not exists !!!"%(blockdev)
    return 1
    
  d = adaptative_tbl(2,"%s tuning"%(b)) 
  d.new_center_line()
  d.set_column(1,"File")
  d.set_column(2,"Value")
  d.end_separator()  
  
  rozo_print_file(d, "%s/rotational"%(path))
   
  val = rozo_print_file(d, "%s/scheduler"%(path))
  if "[deadline]" in val:
    rozo_print_file(d, "%s/iosched/read_expire"%(path))
    rozo_print_file(d, "%s/iosched/write_expire"%(path))
    rozo_print_file(d, "%s/iosched/fifo_batch"%(path))
    rozo_print_file(d, "%s/iosched/front_merges"%(path))
    
  rozo_print_file(d, "%s/nr_requests"%(path))
  rozo_print_file(d, "%s/read_ahead_kb"%(path))
  rozo_print_file(d, "%s/nomerges"%(path))
  d.display()
  return 0
    
  
#_____________________________________________  
#
# Create a temporary directory and mount the device on it
#
def mount_temporary_dir(blockdev,tmp):  

  # Create temporary directory when it does not exists
  if not os.path.exists(tmp):
    try:
      os.mkdir(tmp)
    except:
      return 1
  
  # Mount device on this directory     
  os.system("umount %s 2>/dev/null"%(tmp))
  os.system("mount /dev/%s %s 2>/dev/null"%(blockdev ,tmp))
  
  # Check the device is actually mounted on the temporary directory
  dev,fstype,mountpoint = rozo_get_block_devices(blockdev)
  if dev == None:
    return 1
  if mountpoint != tmp:
    return 1
      
  return 0  
  
  
  
#_____________________________________________  
# 
# Pormat a device 
#
def rozo_format_device(blockdev,lazzy,spare,cid,sid,dev,noUnicLabel) :

  MKFS = "mkfs.ext4 -F -b 4096 -m 0 -q"
  if lazzy == False:
    MKFS = MKFS+" -E lazy_itable_init=0,lazy_journal_init=0"
  
  if spare == True: 
    if options.mark:
      if len(options.mark) > 9:
        print "Spare mark must be less than 9 characters"
        exit(-1)
      LABEL = "RozoSp_%s"%(options.mark)
    else:
      LABEL = "RozoSp_"
  else:
    LABEL = "Rozo_%s_%s_%s"%(cid,sid,dev)
    #
    # Check whether some other device has already the label
    #
    string="lsblk -Pno KNAME,LABEL"
    parsed = shlex.split(string)
    cmd = subprocess.Popen(parsed, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    for line in cmd.stdout:
      device = line.split('"')[1].strip()
      if device == blockdev: continue
      label  = line.split('"')[3].strip()  
      if label == LABEL:
        if noUnicLabel == True:
          print "WARNING: Device %s already holds label %s"%(device,LABEL)  
          break
        print "ERROR: Device %s already holds label %s !!!"%(device,LABEL)  
        exit(-1)
        
  MKFS += " -L " + LABEL + " /dev/" + blockdev
  parsed = shlex.split(MKFS)
  cmd = subprocess.Popen(parsed, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  for line in cmd.stderr:
    print line
    exit(-1)

  rozo_mark_device(blockdev,spare,cid,sid,dev)  
      
  syslog.syslog(MKFS)	  
  print MKFS      
  return 0
#_____________________________________________  
#
# Write a regular mark on device
#
def rozo_mark_regular(tmp,blockdev,cid,sid,dev) :

  os.system("touch %s/storage_c%s_s%s_%s"%(tmp,cid,sid,dev))  
  syslog.syslog("%s formated for cid/sid/dev %s/%s/%s"%(blockdev,cid,sid,dev))
  
#_____________________________________________  
#
# Write a spare mark on device
#
def rozo_mark_spare(tmp,blockdev) :  

  if options.mark:        
     os.system("echo  %s > %s/rozofs_spare"%(options.mark, tmp))   
     print "%s formated for spare with \"%s\" mark"%(blockdev,options.mark)
     return 
  os.system("truncate -s 0 %s/rozofs_spare"%(tmp))   
  syslog.syslog("%s formated for spare"%(blockdev))
     
#_____________________________________________     
#
# Mount device on a temporary directory in order
# to write a mark file
# 
def rozo_mark_device(blockdev,spare,cid,sid,dev):
  tmp="/tmp/rozofs_temporary_dir.%s"%(os.getpid())
  
  # Mount adevice on temporary directory
  if mount_temporary_dir(blockdev,tmp) != 0: 
    os.system("rmdir %s 2>/dev/null"%(tmp))
    exit(-1)

  # Write the requested mark file on it
  if spare == True:
    rozo_mark_spare(tmp,blockdev)
  else:
    rozo_mark_regular(tmp,blockdev,cid,sid,dev)   
    
  # Unmount the temporary directory   
  os.system("umount %s"%(tmp))  
  os.system("rmdir %s 2>/dev/null"%(tmp))
  exit(0)   
     


#_____________________________________________  
def syntax(string=None) :

  if string != None:
    print "\n\033[1m!!! %s !!!\033[0m\n"%(string)
  print "\033[4mUsage:\033[0m"
  print "  To list the available devices"
  print "       \033[1mrozo_device\033[0m"
  print "  To get more information for some block devices"
  print "       \033[1mrozo_device <dev>,...\033[0m"
  print "  To switch the led on/off of some disk slots within an enclosure"
  print "       \033[1mrozo_device {-l|--led} {on|off|get} <dev>,...\033[0m"
  print "  To tune some block devices"
  print "       \033[1mrozo_device {-t|--tune} {hdd|ssd} <dev>,... [ --nr_request <nr_request> ]\033[0m"
  print "  To format a device use this command"
  print "       \033[1mrozo_device {-f|--format} {spare|<c>/<s>/<d>}[,option,...] <dev>\033[0m"
  print "     mandatory paramter is"
  print "         either \033[1mspare\033[0m        to format a spare disk."
  print "         or     \033[1m<c>/<s>/<d>\033[0m  to format a regular file for cluster <c> sid <s> device <d>.." 
  print "     options can be"
  print "         \033[1mforce\033[0m        to force formating aleady formated device."
  print "         \033[1mlazzy\033[0m        to format lazzyly."
  print "         \033[1mnoUnicLabel\033[0m  not to check label unicity."  
  print "\033[4mExamples:\033[0m"
  print ". This command lists information about all block devices"
  print "  \033[1mrozo_device\033[0m"
  print ". This command lists information about device sdm and sdo"
  print "  \033[1mrozo_device sdm sdo\033[0m"
  print ". This command formats the block device /dev/sdl as device 3 of sid 4 of cluster 2."
  print "  \033[1mrozo_device -f 2/4/3 sdl\033[0m"
  print ". This command formats the block device /dev/sdm as a spare device."
  print "  This spare device has an empty spare mark file. This is the usual"
  print "  case when only one volume is configured."
  print "  \033[1mrozo_device -f spare sdm\033[0m" 
  print ". This command forces to re-format the block device /dev/sdn as a spare device."
  print "  This spare device has a spare mark file containing the string \"NVME\"." 
  print "  This must fit to the spare-mark parameter in storage.conf for such"
  print "  type of devices when multiple volumes are configured."
  print "  \033[1mrozo_device -f spare,force sdn -m NVME\033[0m"
  print ". This command tunes block devices sda to sdd in HDD mode"
  print "  \033[1mrozo_device -t hdd sd{a..d}\033[0m"
  print ""
  print "Check man storage.conf."
  exit(-1)    

#_____________________________________________  
#
# M A I N
#
#_____________________________________________      

  
parser = OptionParser()
parser.add_option("-m","--mark", action="store",type="string", dest="mark", help="The mark to be written if any in the spare mark file.")
parser.add_option("-e","--extra", action="store",type="string", dest="extra", help="extra mkfs options.")
parser.add_option("-f","--format", action="store",type="string",dest="format", help="Formats a device.")
parser.add_option("-t","--tune", action="store",type="string",dest="tune", help="Tune a SSG or HDD device.")
parser.add_option("-n","--nr_requests", action="store",type="string",dest="nr_requests", help="nr_request value to set.")
parser.add_option("-r","--read_expire", action="store",type="string",dest="read_expire", help="read_expire value to set.")
parser.add_option("-w","--write_expire", action="store",type="string",dest="write_expire", help="write_expire value to set.")
parser.add_option("-a","--read_ahead", action="store",type="string",dest="read_ahead", help="read ahead KB value to set.")
parser.add_option("-l","--led", action="store",type="string", dest="led", help="The led requested status (on/off).")

(options, args) = parser.parse_args()

#
# help requested 
#
if len(args) != 0 and args[0] == "?": syntax("?")

string="lsblk -o HCTL"
parsed = shlex.split(string)
cmd = subprocess.Popen(parsed, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
output, error = cmd.communicate()
if error == None or error == "":
  newlsblk = True
else:
  newlsblk = False 
#
# Read block devices
#
blockdev = []
for b in args:  
  if len(b.split('/')) > 1:
    blockdev.append(b.split('/')[2].strip())
  else:
    blockdev.append(b.strip())



# Check block devices exists when given as parameter
#
for b in blockdev:
  dev,fstype,mountpoint = rozo_get_block_devices(b)
  if dev == None:
    print "No such RozoFS block device %s"%(b)
    exit(-1)

#
# Led
#
if options.led != None:
  if len(blockdev) == 0: syntax("Missing block device name")
  if options.led == "on" or options.led == "off" or options.led == "get":
    if len(blockdev) == 0:
      syntax("--led option requires block device identifiers")
    rozo_led_device(blockdev,options.led)
    exit(0)
  syntax("--led option requires on/off/get")
  

#
# Tune device
#        
if options.tune != None:
  if len(blockdev) == 0: syntax("Missing block device name")

  # Tuning a HDD
  if options.tune == "ssd" or options.tune == "SSD":
    rozo_tune_ssd_devices(blockdev, nr_requests=options.nr_requests)
    exit(0)
    
  # Tuning a SSD
  if options.tune == "hdd" or options.tune == "HDD":
    rozo_tune_hdd_devices(blockdev, nr_requests=options.nr_requests, read_expire=options.read_expire, write_expire=options.write_expire, read_ahead_kb=options.read_ahead)
    exit(0)
    
  syntax("Tuning requires either ssd or hdd")
   

#
# Format a device
#     

if options.format != None:
  if len(blockdev) == 0: syntax("Missing block device name")
  force = False  
  spare = False
  lazzy = False
  noUnicLabel = False
  cid   = None
  sid   = None
  dev   = None
  # Format only one device at a time
  if len(blockdev) != 1: 
    syntax("Format requires one and only one block device")

  # Do not format mounted device
  if mountpoint != None:
    print "%s is mounted on %s !!!"%(blockdev[0],mountpoint)
    exit(-1)  
    
  # Parse options
  for opt in  options.format.split(','):
    if   opt == "force": force = True
    elif opt == "lazzy": lazzy = True
    elif opt == "spare": spare = True
    elif opt == "noUnicLabel": noUnicLabel = True
    else:
      sp = opt.split("/")
      if len(sp) != 3: syntax("Unexpected format option %s"%(opt))
      try:
        cid = int(sp[0])
        sid = int(sp[1])
        dev = int(sp[2])
      except:
        syntax("format option requires inter value for cid/sid/dev"%(opt))

  if fstype != None and force == False:
    print "%s is already formated in %s !!!\n(use force option to force format)"%(blockdev[0],fstype)
    exit(-1)       
        
  rozo_format_device(blockdev[0],lazzy,spare,cid,sid,dev,noUnicLabel)  
  exit(0)  
#
#
# List one or all block devices 
#
if len(blockdev) != 0:
  rozo_list_some_block_device(blockdev)
else:    
  rozo_list_all_block_devices()
exit(0)    

  
