/*

 File generated by ../../tools/rozofsstorage_netdata_cfg.py from rozofsstorage_netdata_cfg.input

 Copyright (c) 2010 Fizians SAS. <http://www.fizians.com>
 This file is part of Rozofs.

 Rozofs is free software; you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published
 by the Free Software Foundation, version 2.

 Rozofs is distributed in the hope that it will be useful, but
 WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see
 <http://www.gnu.org/licenses/>.
 */
#ifndef _ROZOFSSTORAGE_NETDATA_CFG_READ_SHOW_H
#define _ROZOFSSTORAGE_NETDATA_CFG_READ_SHOW_H

#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <errno.h>
#include <libconfig.h>
#include <unistd.h>
#include <inttypes.h>
#include <sys/types.h>
#include <dirent.h>
/*____________________________________________________________________________________________
**
** Set a value to a common configuration parameter
** 
** @param param   Parameter name
** @param value   New value to set
** 
** @retval 1 on success, 0 else
*/
static inline int rozofsstorage_netdata_cfg_generated_set(char * pChar, char *parameter, char *value) {
  if (strcmp(parameter,"display_count")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(display_count,value);
  }
  if (strcmp(parameter,"display_duration")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(display_duration,value);
  }
  if (strcmp(parameter,"display_bytes")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(display_bytes,value);
  }
  if (strcmp(parameter,"debug")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(debug,value);
  }
  if (strcmp(parameter,"display_count_read")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(display_count_read,value);
  }
  if (strcmp(parameter,"display_count_write")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(display_count_write,value);
  }
  if (strcmp(parameter,"display_count_truncate")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(display_count_truncate,value);
  }
  if (strcmp(parameter,"display_count_rebuild_start")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(display_count_rebuild_start,value);
  }
  if (strcmp(parameter,"display_count_write_empty")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(display_count_write_empty,value);
  }
  if (strcmp(parameter,"display_count_stat")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(display_count_stat,value);
  }
  if (strcmp(parameter,"display_count_remove")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(display_count_remove,value);
  }
  if (strcmp(parameter,"display_duration_read")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(display_duration_read,value);
  }
  if (strcmp(parameter,"display_duration_write")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(display_duration_write,value);
  }
  if (strcmp(parameter,"display_duration_truncate")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(display_duration_truncate,value);
  }
  if (strcmp(parameter,"display_duration_write_empty")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(display_duration_write_empty,value);
  }
  if (strcmp(parameter,"display_duration_stat")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(display_duration_stat,value);
  }
  if (strcmp(parameter,"display_duration_remove")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(display_duration_remove,value);
  }
  if (strcmp(parameter,"display_bytes_read")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(display_bytes_read,value);
  }
  if (strcmp(parameter,"display_bytes_write")==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SET_BOOL(display_bytes_write,value);
  }
  pChar += rozofs_string_append_error(pChar,"No such parameter ");
  pChar += rozofs_string_append_error(pChar,parameter);
  pChar += rozofs_eol(pChar);\
  return -1;
}
/*____________________________________________________________________________________________
**
** Search for parameters approximatively like a given string 
** 
** @param parameter   Approximative parameter name we are searching for
** 
** @retval The number of parameters matching the input string
*/
static inline int rozofsstorage_netdata_cfg_generated_search(char * pChar, char *parameter) {
  int match = 0;

  if (strcasestr("display_count",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count,True);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// Whether to display counts graph\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count,True);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("display_duration",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration,True);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// Whether to display duration graph\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration,True);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("display_bytes",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_bytes,True);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// Whether to display bytes graph\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_bytes,True);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("debug",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(debug,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// Whether to display bytes graph\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(debug,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("display_count_read",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_read,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// Count to display\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_read,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("display_count_write",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_write,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_write,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("display_count_truncate",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_truncate,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_truncate,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("display_count_rebuild_start",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_rebuild_start,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_rebuild_start,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("display_count_write_empty",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_write_empty,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_write_empty,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("display_count_stat",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_stat,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_stat,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("display_count_remove",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_remove,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_remove,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("display_duration_read",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_read,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// duration to display\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_read,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("display_duration_write",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_write,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_write,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("display_duration_truncate",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_truncate,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_truncate,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("display_duration_write_empty",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_write_empty,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_write_empty,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("display_duration_stat",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_stat,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_stat,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("display_duration_remove",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_remove,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_remove,False);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("display_bytes_read",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_bytes_read,True);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    pChar += rozofs_string_append(pChar,"// Bytes to display\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_bytes_read,True);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }

  if (strcasestr("display_bytes_write",parameter) != NULL) {
    match++;
    ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_bytes_write,True);
    if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_bytes_write,True);
    if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  }
  if (match == 0) {
    pChar += rozofs_string_append_error(pChar,"No such parameter like ");
    pChar += rozofs_string_append_error(pChar,parameter);
    pChar += rozofs_eol(pChar);\
  }
  return match;
}
/*____________________________________________________________________________________________
**
** rozofsstorage_netdata_cfg man function
**
*/
void man_rozofsstorage_netdata_cfg(char * pChar) {
  pChar += rozofs_string_append_underscore(pChar,"\nUsage:\n");
  pChar += rozofs_string_append_bold(pChar,"\tnetdata [long]");
  pChar += rozofs_string_append     (pChar,"\t\tdisplays the whole rozofsstorage_netdata_cfg configuration.\n");
  pChar += rozofs_string_append_bold(pChar,"\tnetdata [long] <scope>");
  pChar += rozofs_string_append     (pChar,"\tdisplays only the <scope> configuration part.\n");
  pChar += rozofs_string_append_bold(pChar,"\tnetdata search <parameter>");
  pChar += rozofs_string_append     (pChar,"\tdisplays parameters approximatively like <parameter>.\n");
  pChar += rozofs_string_append_bold(pChar,"\tnetdata reload");
  pChar += rozofs_string_append     (pChar,"\treloads and then displays the configuration.\n");
  pChar += rozofs_string_append_bold(pChar,"\tnetdata set <param> <value>");
  pChar += rozofs_string_append     (pChar,"\tmodifies a configuration parameter in memory.\n");
  pChar += rozofs_string_append_bold(pChar,"\tnetdata save");
  pChar += rozofs_string_append     (pChar,"\tsaves configuration from memory to disk.\n");
  pChar += rozofs_string_append_bold(pChar,"\tnetdata files");
  pChar += rozofs_string_append     (pChar,"\tReturns the name of the configuration file and the saved ones.\n");
}
/*____________________________________________________________________________________________
**
** global scope configuration parameters
**
*/
char * show_rozofsstorage_netdata_cfg_module_global(char * pChar) {

  pChar += rozofs_string_append_effect(pChar,"#                                                            \n#     ", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"    GLOBAL SCOPE CONFIGURATION PARAMETERS         ", ROZOFS_COLOR_YELLOW ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"     \n#                                                            \n\n", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Whether to display counts graph\n");
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Whether to display duration graph\n");
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_bytes,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Whether to display bytes graph\n");
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_bytes,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(debug,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Whether to display bytes graph\n");
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(debug,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  return pChar;
}
/*____________________________________________________________________________________________
**
** global scope configuration parameters
**
*/
char * show_rozofsstorage_netdata_cfg_module_global_short(char * pChar) {

  pChar += rozofs_string_append_effect(pChar,"#                                                            \n#     ", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"    GLOBAL SCOPE CONFIGURATION PARAMETERS         ", ROZOFS_COLOR_YELLOW ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"     \n#                                                            \n\n", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count,True);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// Whether to display counts graph\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count,True);
  }


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration,True);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// Whether to display duration graph\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration,True);
  }


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_bytes,True);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// Whether to display bytes graph\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_bytes,True);
  }


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(debug,False);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// Whether to display bytes graph\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(debug,False);
  }
  return pChar;
}
/*____________________________________________________________________________________________
**
** count scope configuration parameters
**
*/
char * show_rozofsstorage_netdata_cfg_module_count(char * pChar) {

  pChar += rozofs_string_append_effect(pChar,"#                                                            \n#     ", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"    COUNT SCOPE CONFIGURATION PARAMETERS          ", ROZOFS_COLOR_YELLOW ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"     \n#                                                            \n\n", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_read,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Count to display\n");
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_read,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_write,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_write,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_truncate,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_truncate,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_rebuild_start,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_rebuild_start,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_write_empty,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_write_empty,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_stat,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_stat,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_remove,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_remove,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  return pChar;
}
/*____________________________________________________________________________________________
**
** count scope configuration parameters
**
*/
char * show_rozofsstorage_netdata_cfg_module_count_short(char * pChar) {

  pChar += rozofs_string_append_effect(pChar,"#                                                            \n#     ", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"    COUNT SCOPE CONFIGURATION PARAMETERS          ", ROZOFS_COLOR_YELLOW ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"     \n#                                                            \n\n", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_read,False);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// Count to display\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_read,False);
  }


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_write,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_write,False);
  }


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_truncate,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_truncate,False);
  }


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_rebuild_start,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_rebuild_start,False);
  }


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_write_empty,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_write_empty,False);
  }


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_stat,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_stat,False);
  }


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_remove,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_remove,False);
  }
  return pChar;
}
/*____________________________________________________________________________________________
**
** duration scope configuration parameters
**
*/
char * show_rozofsstorage_netdata_cfg_module_duration(char * pChar) {

  pChar += rozofs_string_append_effect(pChar,"#                                                            \n#     ", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"    DURATION SCOPE CONFIGURATION PARAMETERS       ", ROZOFS_COLOR_YELLOW ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"     \n#                                                            \n\n", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_read,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// duration to display\n");
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_read,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_write,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_write,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_truncate,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_truncate,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_write_empty,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_write_empty,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_stat,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_stat,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_remove,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_remove,False);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  return pChar;
}
/*____________________________________________________________________________________________
**
** duration scope configuration parameters
**
*/
char * show_rozofsstorage_netdata_cfg_module_duration_short(char * pChar) {

  pChar += rozofs_string_append_effect(pChar,"#                                                            \n#     ", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"    DURATION SCOPE CONFIGURATION PARAMETERS       ", ROZOFS_COLOR_YELLOW ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"     \n#                                                            \n\n", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_read,False);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// duration to display\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_read,False);
  }


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_write,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_write,False);
  }


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_truncate,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_truncate,False);
  }


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_write_empty,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_write_empty,False);
  }


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_stat,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_stat,False);
  }


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_remove,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_remove,False);
  }
  return pChar;
}
/*____________________________________________________________________________________________
**
** bytes scope configuration parameters
**
*/
char * show_rozofsstorage_netdata_cfg_module_bytes(char * pChar) {

  pChar += rozofs_string_append_effect(pChar,"#                                                            \n#     ", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"    BYTES SCOPE CONFIGURATION PARAMETERS          ", ROZOFS_COLOR_YELLOW ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"     \n#                                                            \n\n", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_bytes_read,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  pChar += rozofs_string_append(pChar,"// Bytes to display\n");
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_bytes_read,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_bytes_write,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_bold(pChar);
  ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_bytes_write,True);
  if (isDefaultValue==0) pChar += rozofs_string_set_default(pChar);
  return pChar;
}
/*____________________________________________________________________________________________
**
** bytes scope configuration parameters
**
*/
char * show_rozofsstorage_netdata_cfg_module_bytes_short(char * pChar) {

  pChar += rozofs_string_append_effect(pChar,"#                                                            \n#     ", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"    BYTES SCOPE CONFIGURATION PARAMETERS          ", ROZOFS_COLOR_YELLOW ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);
  pChar += rozofs_string_append_effect(pChar,"     \n#                                                            \n\n", ROZOFS_COLOR_BLUE ROZOFS_COLOR_BOLD ROZOFS_COLOR_REVERSE);


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_bytes_read,True);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// Bytes to display\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_bytes_read,True);
  }


  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_bytes_write,True);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_bytes_write,True);
  }
  return pChar;
}
/*____________________________________________________________________________________________
**
** global scope configuration parameters
**
*/
char * save_rozofsstorage_netdata_cfg_module_global(char * pChar) {

  pChar += rozofs_string_append(pChar,"#____________________________________________________________\n");
  pChar += rozofs_string_append(pChar,"# ");
  pChar += rozofs_string_append(pChar,"global");
  pChar += rozofs_string_append(pChar," scope configuration parameters\n");
  pChar += rozofs_string_append(pChar,"#____________________________________________________________\n\n");

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count,True);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// Whether to display counts graph\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count,True);
  }

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration,True);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// Whether to display duration graph\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration,True);
  }

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_bytes,True);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// Whether to display bytes graph\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_bytes,True);
  }

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(debug,False);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// Whether to display bytes graph\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(debug,False);
  }
  return pChar;
}
/*____________________________________________________________________________________________
**
** count scope configuration parameters
**
*/
char * save_rozofsstorage_netdata_cfg_module_count(char * pChar) {

  pChar += rozofs_string_append(pChar,"#____________________________________________________________\n");
  pChar += rozofs_string_append(pChar,"# ");
  pChar += rozofs_string_append(pChar,"count");
  pChar += rozofs_string_append(pChar," scope configuration parameters\n");
  pChar += rozofs_string_append(pChar,"#____________________________________________________________\n\n");

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_read,False);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// Count to display\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_read,False);
  }

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_write,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_write,False);
  }

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_truncate,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_truncate,False);
  }

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_rebuild_start,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_rebuild_start,False);
  }

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_write_empty,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_write_empty,False);
  }

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_stat,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_stat,False);
  }

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_count_remove,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_count_remove,False);
  }
  return pChar;
}
/*____________________________________________________________________________________________
**
** duration scope configuration parameters
**
*/
char * save_rozofsstorage_netdata_cfg_module_duration(char * pChar) {

  pChar += rozofs_string_append(pChar,"#____________________________________________________________\n");
  pChar += rozofs_string_append(pChar,"# ");
  pChar += rozofs_string_append(pChar,"duration");
  pChar += rozofs_string_append(pChar," scope configuration parameters\n");
  pChar += rozofs_string_append(pChar,"#____________________________________________________________\n\n");

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_read,False);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// duration to display\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_read,False);
  }

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_write,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_write,False);
  }

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_truncate,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_truncate,False);
  }

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_write_empty,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_write_empty,False);
  }

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_stat,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_stat,False);
  }

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_duration_remove,False);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_duration_remove,False);
  }
  return pChar;
}
/*____________________________________________________________________________________________
**
** bytes scope configuration parameters
**
*/
char * save_rozofsstorage_netdata_cfg_module_bytes(char * pChar) {

  pChar += rozofs_string_append(pChar,"#____________________________________________________________\n");
  pChar += rozofs_string_append(pChar,"# ");
  pChar += rozofs_string_append(pChar,"bytes");
  pChar += rozofs_string_append(pChar," scope configuration parameters\n");
  pChar += rozofs_string_append(pChar,"#____________________________________________________________\n\n");

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_bytes_read,True);
  if (isDefaultValue==0) {
    pChar += rozofs_string_append(pChar,"// Bytes to display\n");
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_bytes_read,True);
  }

  ROZOFSSTORAGE_NETDATA_CFG_IS_DEFAULT_BOOL(display_bytes_write,True);
  if (isDefaultValue==0) {
    ROZOFSSTORAGE_NETDATA_CFG_SHOW_BOOL(display_bytes_write,True);
  }
  return pChar;
}
/*____________________________________________________________________________________________
**
** Save configuration parameter on disk
** 
** @param pChar   Parameter name
** @param value   New value to set
** 
** @retval 1 on success, 0 else
*/
static inline int rozofsstorage_netdata_cfg_generated_save(char * pChar) {
  char *pBuff;
  int   fd;
  char  saved_file[256];

  /*
  ** Save previous file
  */
  time_t t = time(NULL);
  struct tm tm = *localtime(&t);
  sprintf(saved_file,"%s_%2.2d-%2.2d-%2.2d_%2.2d:%2.2d:%2.2d", rozofsstorage_netdata_cfg_file_name,tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min, tm.tm_sec);
  rename(rozofsstorage_netdata_cfg_file_name,saved_file);

  /*
  ** Creat a new file
  */
  fd = open(rozofsstorage_netdata_cfg_file_name,O_CREAT|O_TRUNC|O_APPEND|O_WRONLY,0777);
  if (fd < 0) {
    pChar += rozofs_string_append_error(pChar,"Can not open ");
    pChar += rozofs_string_append_error(pChar,rozofsstorage_netdata_cfg_file_name);
    return -1;
  }
  pBuff = save_rozofsstorage_netdata_cfg_module_global(myBigBuffer);
  if (write(fd,myBigBuffer,pBuff-myBigBuffer)<0) {
    pChar += rozofs_string_append_error(pChar,"Can not write ");
    pChar += rozofs_string_append_error(pChar,rozofsstorage_netdata_cfg_file_name);
    close(fd);
    return -1;
  }
  pBuff = save_rozofsstorage_netdata_cfg_module_count(myBigBuffer);
  if (write(fd,myBigBuffer,pBuff-myBigBuffer)<0) {
    pChar += rozofs_string_append_error(pChar,"Can not write ");
    pChar += rozofs_string_append_error(pChar,rozofsstorage_netdata_cfg_file_name);
    close(fd);
    return -1;
  }
  pBuff = save_rozofsstorage_netdata_cfg_module_duration(myBigBuffer);
  if (write(fd,myBigBuffer,pBuff-myBigBuffer)<0) {
    pChar += rozofs_string_append_error(pChar,"Can not write ");
    pChar += rozofs_string_append_error(pChar,rozofsstorage_netdata_cfg_file_name);
    close(fd);
    return -1;
  }
  pBuff = save_rozofsstorage_netdata_cfg_module_bytes(myBigBuffer);
  if (write(fd,myBigBuffer,pBuff-myBigBuffer)<0) {
    pChar += rozofs_string_append_error(pChar,"Can not write ");
    pChar += rozofs_string_append_error(pChar,rozofsstorage_netdata_cfg_file_name);
    close(fd);
    return -1;
  }
  pChar += rozofs_string_append(pChar,"Saved in ");
  pChar += rozofs_string_append(pChar,rozofsstorage_netdata_cfg_file_name);
  pChar += rozofs_eol(pChar);
  close(fd);
  return 0;
}
/*____________________________________________________________________________________________
**
** rozofsstorage_netdata_cfg diagnostic function
**
*/
char * rozofsstorage_netdata_cfg_generated_show_all_files(char * pChar) {
  char            cmd[256];

  if (rozofsstorage_netdata_cfg_file_is_read==0) {
    pChar += rozofs_string_append_error(pChar,"Can not read configuration file ");
    return pChar;
  }
  sprintf(cmd,"ls -lisa %s*",rozofsstorage_netdata_cfg_file_name);
  uma_dbg_run_system_cmd(cmd, pChar, uma_dbg_get_buffer_len()); 
  return pChar;
}
/*____________________________________________________________________________________________
**
** rozofsstorage_netdata_cfg diagnostic function
**
*/
void rozofsstorage_netdata_cfg_generated_show(char * argv[], uint32_t tcpRef, void *bufRef) {
char *pChar = uma_dbg_get_buffer();
char *pHead;
int     longformat = 0;
char  * moduleName = NULL;

  if (argv[1] != NULL) {

    if (strcmp(argv[1],"reload")==0) {
      rozofsstorage_netdata_cfg_read(NULL);
      pChar += rozofs_string_append(pChar, "File reloaded\n");
      uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
      return;
    }

    if (strcmp(argv[1],"set")==0) {
      if ((argv[2] == NULL)||(argv[3] == NULL)) {
        pChar += rozofs_string_append_error(pChar, "Missing <parameter> and/or <value>\n");
        uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
        return;
      }
      rozofsstorage_netdata_cfg_generated_set(pChar, argv[2],argv[3]);
      uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
      return;
    }

    if (strcmp(argv[1],"search")==0) {
      if (argv[2] == NULL) {
        pChar += rozofs_string_append_error(pChar, "Missing <parameter>\n");
        uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
        return;
      }
      rozofsstorage_netdata_cfg_generated_search(pChar, argv[2]);
      uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
      return;
    }

    if (strcmp(argv[1],"save")==0) {
      rozofsstorage_netdata_cfg_generated_save(pChar);
      uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
      return;
    }

    if (strcmp(argv[1],"files")==0) {
      rozofsstorage_netdata_cfg_generated_show_all_files(pChar);
      uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
      return;
    }

    if (strcmp(argv[1],"long")==0) {
      longformat = 1;
      moduleName = argv[2];
    }
    else {
      moduleName = argv[1];
      if (argv[2] != NULL) {
        if (strcmp(argv[2],"long")==0) {
          longformat = 1;
        }
      }
    }

    if (moduleName != NULL) {
      if (strcasecmp("global",moduleName)==0) {
        if ((pHead = (char *)ruc_buf_getPayload(bufRef)) == NULL) {
          severe( "ruc_buf_getPayload(%p)", bufRef );
          return;
        }
        /*
        ** Set the command recall string
        */
        pChar = uma_dbg_cmd_recall((UMA_MSGHEADER_S *)pHead);
        if (longformat) {
          pChar = show_rozofsstorage_netdata_cfg_module_global(pChar);
        } else {
          pChar = show_rozofsstorage_netdata_cfg_module_global_short(pChar);
        } 
        uma_dbg_send_buffer(tcpRef, bufRef, pChar-pHead, TRUE);
        return;
      }
      else if (strcasecmp("count",moduleName)==0) {
        if ((pHead = (char *)ruc_buf_getPayload(bufRef)) == NULL) {
          severe( "ruc_buf_getPayload(%p)", bufRef );
          return;
        }
        /*
        ** Set the command recall string
        */
        pChar = uma_dbg_cmd_recall((UMA_MSGHEADER_S *)pHead);
        if (longformat) {
          pChar = show_rozofsstorage_netdata_cfg_module_count(pChar);
        } else {
          pChar = show_rozofsstorage_netdata_cfg_module_count_short(pChar);
        } 
        uma_dbg_send_buffer(tcpRef, bufRef, pChar-pHead, TRUE);
        return;
      }
      else if (strcasecmp("duration",moduleName)==0) {
        if ((pHead = (char *)ruc_buf_getPayload(bufRef)) == NULL) {
          severe( "ruc_buf_getPayload(%p)", bufRef );
          return;
        }
        /*
        ** Set the command recall string
        */
        pChar = uma_dbg_cmd_recall((UMA_MSGHEADER_S *)pHead);
        if (longformat) {
          pChar = show_rozofsstorage_netdata_cfg_module_duration(pChar);
        } else {
          pChar = show_rozofsstorage_netdata_cfg_module_duration_short(pChar);
        } 
        uma_dbg_send_buffer(tcpRef, bufRef, pChar-pHead, TRUE);
        return;
      }
      else if (strcasecmp("bytes",moduleName)==0) {
        if ((pHead = (char *)ruc_buf_getPayload(bufRef)) == NULL) {
          severe( "ruc_buf_getPayload(%p)", bufRef );
          return;
        }
        /*
        ** Set the command recall string
        */
        pChar = uma_dbg_cmd_recall((UMA_MSGHEADER_S *)pHead);
        if (longformat) {
          pChar = show_rozofsstorage_netdata_cfg_module_bytes(pChar);
        } else {
          pChar = show_rozofsstorage_netdata_cfg_module_bytes_short(pChar);
        } 
        uma_dbg_send_buffer(tcpRef, bufRef, pChar-pHead, TRUE);
        return;
      }
      else {
        pChar += rozofs_string_append_error(pChar, "Unexpected configuration scope\n");
        uma_dbg_send(tcpRef, bufRef, TRUE, uma_dbg_get_buffer());
        return;
      }
    }
  }

  if ((pHead = (char *)ruc_buf_getPayload(bufRef)) == NULL) {
    severe( "ruc_buf_getPayload(%p)", bufRef );
    return;
  }
  /*
  ** Set the command recall string
  */
  pChar = uma_dbg_cmd_recall((UMA_MSGHEADER_S *)pHead);
  if (rozofsstorage_netdata_cfg_file_is_read==0) {
    pChar += rozofs_string_append_error(pChar,"Can not read configuration file ");
  }
  
  
  if (longformat) {
    pChar = show_rozofsstorage_netdata_cfg_module_global(pChar);
  } else {
    pChar = show_rozofsstorage_netdata_cfg_module_global_short(pChar);
  } 
  uma_dbg_send_buffer(tcpRef, bufRef, pChar-pHead, FALSE);
  
  bufRef = uma_dbg_get_new_buffer(tcpRef);
  if (bufRef == NULL) {
    warning( "uma_dbg_get_new_buffer() Buffer depletion");
    return;
  }
  if ((pHead = (char *)ruc_buf_getPayload(bufRef)) == NULL) {
    severe( "ruc_buf_getPayload(%p)", bufRef );
    return;
  }
  pChar = pHead+sizeof(UMA_MSGHEADER_S);
  *pChar = 0;
  
  if (longformat) {
    pChar = show_rozofsstorage_netdata_cfg_module_count(pChar);
  } else {
    pChar = show_rozofsstorage_netdata_cfg_module_count_short(pChar);
  } 
  uma_dbg_send_buffer(tcpRef, bufRef, pChar-pHead, FALSE);
  
  bufRef = uma_dbg_get_new_buffer(tcpRef);
  if (bufRef == NULL) {
    warning( "uma_dbg_get_new_buffer() Buffer depletion");
    return;
  }
  if ((pHead = (char *)ruc_buf_getPayload(bufRef)) == NULL) {
    severe( "ruc_buf_getPayload(%p)", bufRef );
    return;
  }
  pChar = pHead+sizeof(UMA_MSGHEADER_S);
  *pChar = 0;
  
  if (longformat) {
    pChar = show_rozofsstorage_netdata_cfg_module_duration(pChar);
  } else {
    pChar = show_rozofsstorage_netdata_cfg_module_duration_short(pChar);
  } 
  uma_dbg_send_buffer(tcpRef, bufRef, pChar-pHead, FALSE);
  
  bufRef = uma_dbg_get_new_buffer(tcpRef);
  if (bufRef == NULL) {
    warning( "uma_dbg_get_new_buffer() Buffer depletion");
    return;
  }
  if ((pHead = (char *)ruc_buf_getPayload(bufRef)) == NULL) {
    severe( "ruc_buf_getPayload(%p)", bufRef );
    return;
  }
  pChar = pHead+sizeof(UMA_MSGHEADER_S);
  *pChar = 0;
  
  if (longformat) {
    pChar = show_rozofsstorage_netdata_cfg_module_bytes(pChar);
  } else {
    pChar = show_rozofsstorage_netdata_cfg_module_bytes_short(pChar);
  } 
  uma_dbg_send_buffer(tcpRef, bufRef, pChar-pHead, FALSE);
  
  bufRef = uma_dbg_get_new_buffer(tcpRef);
  if (bufRef == NULL) {
    warning( "uma_dbg_get_new_buffer() Buffer depletion");
    return;
  }
  if ((pHead = (char *)ruc_buf_getPayload(bufRef)) == NULL) {
    severe( "ruc_buf_getPayload(%p)", bufRef );
    return;
  }
  pChar = pHead+sizeof(UMA_MSGHEADER_S);
  *pChar = 0;
  pChar += rozofs_string_append(pChar,"#____________________________________________________________\n");
  pChar += rozofs_string_append(pChar,"# ");
  pChar += rozofs_string_append(pChar," rozofsstorage_netdata_cfg file is ");
  pChar += rozofs_string_append(pChar,rozofsstorage_netdata_cfg_file_name);
  pChar += rozofs_string_append(pChar,"\n#____________________________________________________________\n\n");
  uma_dbg_send_buffer(tcpRef, bufRef, pChar-pHead, TRUE);
  return;
}
/*____________________________________________________________________________________________
**
** Get the modification time of the configuration file
** 
** @param fname   Configuration file of NULL (use default)
**
** @retval  the file modification time
*/
uint64_t rozofsstorage_netdata_cfg_get_mtime(char * fname) {
  struct stat buf;
  if (fname == NULL) {
    strcpy(rozofsstorage_netdata_cfg_file_name,ROZOFS_CONFIG_DIR"/rozofsstorage_netdata_cfg.conf");
  }
  else {
    strcpy(rozofsstorage_netdata_cfg_file_name,fname); 
  } 

  if (stat(rozofsstorage_netdata_cfg_file_name,&buf)!=0) {
    return 0;
  }
  return (buf.st_mtim.tv_sec*1000000)+buf.st_mtim.tv_nsec/1000;
}

/*____________________________________________________________________________________________
**
** Check the presence of the configuration file
** 
** @param fname   Configuration file of NULL (use default)
**
** @retval  0 if it exist, -1 else
*/
int rozofsstorage_netdata_cfg_does_file_exist(char * fname) {

  if (fname == NULL) {
    strcpy(rozofsstorage_netdata_cfg_file_name,ROZOFS_CONFIG_DIR"/rozofsstorage_netdata_cfg.conf");
  }
  else {
    strcpy(rozofsstorage_netdata_cfg_file_name,fname); 
  } 

  if (access(rozofsstorage_netdata_cfg_file_name,R_OK)!=0) {
    return -1;
  }
  return 0;
}

/*____________________________________________________________________________________________
**
** Read the configuration file
*/
static inline void rozofsstorage_netdata_cfg_generated_read(char * fname) {
  config_t          cfg; 

  if (rozofsstorage_netdata_cfg_file_is_read == 0) {
    uma_dbg_addTopicAndMan("netdata",show_rozofsstorage_netdata_cfg, man_rozofsstorage_netdata_cfg, 0);
  }

  if (rozofsstorage_netdata_cfg_does_file_exist(fname) != 0) {
    printf("cant access %s: %s.", rozofsstorage_netdata_cfg_file_name, strerror(errno));
    fatal("cant access %s: %s.", rozofsstorage_netdata_cfg_file_name, strerror(errno));
  }

  config_init(&cfg);
  rozofsstorage_netdata_cfg_file_is_read = 1;
  if (config_read_file(&cfg, rozofsstorage_netdata_cfg_file_name) == CONFIG_FALSE) {
    if (errno == ENOENT) {
      info("Missing file %s.", rozofsstorage_netdata_cfg_file_name);
    }
    else {
      severe("cant read %s: %s (line %d).", rozofsstorage_netdata_cfg_file_name, config_error_text(&cfg),config_error_line(&cfg));
    }
    rozofsstorage_netdata_cfg_file_is_read = 0;
  }

  /*
  ** global scope configuration parameters
  */
  // Whether to display counts graph 
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(display_count,True);
  // Whether to display duration graph 
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(display_duration,True);
  // Whether to display bytes graph 
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(display_bytes,True);
  // Whether to display bytes graph 
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(debug,False);
  /*
  ** count scope configuration parameters
  */
  // Count to display 
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(display_count_read,False);
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(display_count_write,False);
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(display_count_truncate,False);
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(display_count_rebuild_start,False);
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(display_count_write_empty,False);
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(display_count_stat,False);
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(display_count_remove,False);
  /*
  ** duration scope configuration parameters
  */
  // duration to display 
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(display_duration_read,False);
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(display_duration_write,False);
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(display_duration_truncate,False);
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(display_duration_write_empty,False);
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(display_duration_stat,False);
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(display_duration_remove,False);
  /*
  ** bytes scope configuration parameters
  */
  // Bytes to display 
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(display_bytes_read,True);
  ROZOFSSTORAGE_NETDATA_CFG_READ_BOOL(display_bytes_write,True);
 
  config_destroy(&cfg);
}
#endif
