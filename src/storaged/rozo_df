#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (c) 2010 Fizians SAS. <http://www.fizians.com>
# This file is part of Rozofs.
#
# Rozofs is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 2.
#
# Rozofs is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see
# <http://www.gnu.org/licenses/>.
import sys
import os.path
import subprocess
import time
import re
import shlex
from optparse import OptionParser
import syslog
import datetime

rozofs_devices = []

#___________________________  
def KB_to_other_unit(inBytes):
  if inBytes < 0: 
    sign  = "-"
    value = - int(inBytes)*1024
  else:           
    sign = ""
    value = int(inBytes)*1024

  if value < 1000: return "%s%4d  "%(sign,value)
  
  if value < 1000000:
    if value >= (100*1000): return "%s%4d K"%(sign,value/1000)
    if value >=  (10*1000): return "%s%2d.%1d K"%(sign,value/1000,(value % 1000) / 100)
    return "%s%1d.%2.2d K"%(sign,value/1000,(value % 1000) / 10)   
  
  if value < 1000000000:  
    if value >= (100*1000000): return "%s%4d M"%(sign,value/1000000)
    if value >=  (10*1000000): return "%s%2d.%1d M"%(sign,value/1000000,(value % 1000000) / 100000)
    return "%s%1d.%2.2d M"%(sign,value/1000000,(value % 1000000) / 10000)   
  
  if value < 1000000000000:  
    if value >= (100*1000000000): return "%s%4d G"%(sign,value/1000000000)
    if value >=  (10*1000000000): return "%s%2d.%1d G"%(sign,value/1000000000,(value % 1000000000) / 100000000)
    return "%s%1d.%2.2d G"%(sign,value/1000000000,(value % 1000000000) / 10000000)   
  
  if value < 1000000000000000:  
    if value >= (100*1000000000000): return "%s%4d T"%(sign,value/1000000000000)
    if value >=  (10*1000000000000): return "%s%2d.%1d T"%(sign,value/1000000000000,(value % 1000000000000) / 100000000000)
    return "%s%1d.%2.2d T"%(sign,value/1000000000000,(value % 1000000000000) / 10000000000)   
  
  if value < 1000000000000000000:  
    if value >= (100*1000000000000000): return "%s%4d P"%(sign,value/1000000000000000)
    if value >=  (10*1000000000000000): return "%s%2d.%1d P"%(sign,value/1000000000000000,(value % 1000000000000000) / 100000000000000)
  
  return "%s%1s.%2.2d P"%(sign,value/1000000000000000,(value % 1000000000000000) / 10000000000000)   
#___________________________  
def delta_KB(inBytes):

  if inBytes == 0: return "       " 

  if inBytes < 0: 
    sign  = "-"
    color = ORANGE
    value = -(inBytes*1024)
  else:           
    sign = "+"
    color = DARKGREEN
    value = inBytes*1024

  if value < 1000: return color + "%s%4d  "%(sign,value) + NORMAL
  
  if value < 1000000:
    if value >= (100*1000): return color + "%s%4d K"%(sign,value/1000) + NORMAL
    if value >=  (10*1000): return color + "%s%2d.%1d K"%(sign,value/1000,(value % 1000) / 100) + NORMAL
    return color + "%s%1d.%2.2d K"%(sign,value/1000,(value % 1000) / 10) + NORMAL 
  
  if value < 1000000000:  
    if value >= (100*1000000): return color + "%s%4d M"%(sign,value/1000000) + NORMAL
    if value >=  (10*1000000): return color + "%s%2d.%1d M"%(sign,value/1000000,(value % 1000000) / 100000) + NORMAL
    return color + "%s%1d.%2.2d M"%(sign,value/1000000,(value % 1000000) / 10000) + NORMAL  
  
  if value < 1000000000000:  
    if value >= (100*1000000000): return color + BOLD + "%s%4d G"%(sign,value/1000000000) + NORMAL
    if value >=  (10*1000000000): return color + BOLD +"%s%2d.%1d G"%(sign,value/1000000000,(value % 1000000000) / 100000000) + NORMAL
    return color + BOLD + "%s%1d.%2.2d G"%(sign,value/1000000000,(value % 1000000000) / 10000000) + NORMAL  
  
  if value < 1000000000000000:  
    if value >= (100*1000000000000): return color + REVERSE + "%s%4d T"%(sign,value/1000000000000) + NORMAL
    if value >=  (10*1000000000000): return color + REVERSE + "%s%2d.%1d T"%(sign,value/1000000000000,(value % 1000000000000) / 100000000000) + NORMAL
    return color + REVERSE + "%s%1d.%2.2d T"%(sign,value/1000000000000,(value % 1000000000000) / 10000000000)  + NORMAL 
  
  if value < 1000000000000000000:  
    if value >= (100*1000000000000000): return color + REVERSE + "%s%4d P"%(sign,value/1000000000000000)+ NORMAL
    if value >=  (10*1000000000000000): return color + REVERSE + "%s%2d.%1d P"%(sign,value/1000000000000000,(value % 1000000000000000) / 100000000000000) + NORMAL
  
  return "color + REVERSE + %s%1s.%2.2d P"%(sign,value/1000000000000000,(value % 1000000000000000) / 10000000000000)   + NORMAL


#___________________________________
def get_device_by_name(name):
  global rozofs_devices
  for dev in rozofs_devices:
    if dev.name == name: return dev
  return None
#___________________________________
def get_device_by_mount(mount):
  global rozofs_devices
  for dev in rozofs_devices:
    if dev.mount == mount: return dev
  return None
    
#____________________________________
class rozofs_device:

  def __init__(self, name, mount, free, total):
    global rozofs_devices

    self.name     = name
    self.mount    = mount
    self.free     = free
    self.old_free = free
    self.total    = total
    self.string   = None
    self.time     = int(0)
    rozofs_devices.append(self)

  def delete(self):
    global rozofs_devices
    rozofs_devices.remove(self)
    
  def update(self, free, total):

   self.old_free = self.free
   self.free     = free
   self.total    = total
   self.time     = int(0)
        
  def display(self):
   global threshold
   global average_free
   global good_percent
   
   self.time = self.time + int(1)
   if int(self.total) == 0:
     percent = float(0)
   else:  
     percent = float(self.free)*float(100)/float(self.total)

   
   if options.freeSpace == False:
     try:
       int(average_free)
     except:  
       options.freeSpace = True

   display_free = "%6s "%(KB_to_other_unit(self.free))    
   display_free += " %7s  "%(delta_KB(int(self.free)-int(self.old_free)))

   LINE = "%12s  "%(self.name) 
   #
   # Compare % of free space
   #
   if options.freeSpace == False:
     if int(percent) == int(0):
       color = RED+BOLD+REVERSE
     elif int(percent) < int(5):
       color = RED+BOLD         
     elif (float(percent) < (float(good_percent)-float(threshold))):
       color = YELLOW
     elif (float(percent) > (float(good_percent)+float(threshold))):
       color = CYAN
     else:
       color = NORMAL          
     pc = "%5.1f%%"%(percent)
             
     LINE += color + pc + NORMAL + " %-17s"%(display_free) 

   #
   # Compare free space
   else:   
     display_free = "%6s"%(KB_to_other_unit(self.free))
     display_free += " %7s  "%(delta_KB(int(self.free)-int(self.old_free))) 

     delta = float(self.total) * float(threshold)
     delta /= float(100)
     mini = int(average_free) - int(delta)
     maxi = int(average_free) + int(delta)

     if int(percent) == int(0):
       color = RED+BOLD+REVERSE
     elif int(percent) < int(5):
       color = RED+BOLD
     elif (int(self.free) < int(mini)):
       color = YELLOW
     elif (int(self.free) > int(maxi)):
       color = CYAN
     else:
       color = NORMAL 
     LINE += "%5.1f%% "%(percent) + color + " %-17s"%(display_free) + NORMAL 
         
   LINE += "/ %7s  "%(KB_to_other_unit(self.total))   
   if self.time > int(1):   
     LINE = LINE + RED + BOLD + "%s"%(self.mount) + NORMAL 
     if self.time > int(8): self.delete()
   else:     
     LINE = LINE +"%s"%(self.mount) 
   print LINE
   
      
def do_one_df():
  global average_free
  global good_percent

  total_free   = 0
  total_size   = 0
  total_device = 0
      
  string = "df "
  parsed = shlex.split(string)
  cmd = subprocess.Popen(parsed, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  for line in cmd.stdout:
    name    = line.split()[0]
    total   = line.split()[1]
    used    = line.split()[2]
    try: free    = "%s"%(int(total)-int(used))
    except: continue
    mount   = line.split()[5]
    if "rozofs_mover" in mount: continue
    if "export" in mount: continue
    if name == "rozofs":
      dev = get_device_by_mount(mount)
      if dev == None:
         rozofs_device(name, mount, free, total)
         rozofs_devices.sort(key=lambda k: k.mount)    
      else:
         dev.update(free,total)
      continue
    if "rozofs" in mount:
      dev = get_device_by_name(name)
      if dev == None:
         rozofs_device(name, mount, free, total)
         rozofs_devices.sort(key=lambda k: "%s"%(k.mount))
      else:
         dev.update(free,total)
      total_device += 1 
      total_free   += int(free)   
      total_size   += int(total)   
      continue
  if  int(total_device) == 0:
    average_free = 0
    good_percent = 0
  else:     
    average_free = int(total_free) /  int(total_device)
    good_percent = float(total_free)*100/float(total_size)
      
  if options.freeSpace == False:
    print " _______NAME______" + CYAN + "%" + NORMAL + "____FREE________________SIZE___MOUNTPOINT______________________" 
  else:   
    print " _______NAME______%____" + CYAN + "FREE" + NORMAL + "________________SIZE___MOUNTPOINT______________________" 
      

RED='\033[91m\033[40m'
GREEN='\033[92m\033[40m'
YELLOW='\033[93m\033[40m'
BLUE='\033[94m\033[40m'
PURPLE='\033[95m\033[40m'
CYAN='\033[96m\033[40m'
WHITE='\033[97m\033[40m'
ORANGE='\033[33m\033[40m'
DARKGREEN='\033[32m\033[40m'

BOLD='\033[1m'
REVERSE='\033[7m'
NORMAL='\033[0m'
       
parser = OptionParser()
parser.add_option("-p","--period", action="store",type="string", dest="period", help="Periodicity of the command")
parser.add_option("-t","--threshold", action="store",type="string", dest="threshold", help="Tolerable difference in %")
parser.add_option("-f","--free", action="store_true",default=False, dest="freeSpace", help="Compare free space. default is to compare % of free space")
 
(options, args) = parser.parse_args()

threshold = int(4)        
period = int(0)
average_free = float(0)
good_percent = float(0)

if options.threshold != None:
  try: threshold = options.threshold
  except:
    print "Unexpected threshold value"
    sys.exit(-1)

if options.period != None:
  try: period = int(options.period)
  except:
    print "Unexpected period value"
    sys.exit(-1)

while True:
  
  now = datetime.datetime.now()

  do_one_df()
  for dev in rozofs_devices:  
    if dev.name == "rozofs": dev.display()

  print "____________________ %s _________________________________________"%(now.strftime("%Y-%m-%d %H:%M:%S"))

  total_delta  = int(0)  
  total_free   = int(0)
  total_device = int(0)
  total_size   = int(0)
  for dev in rozofs_devices:   
    if dev.name != "rozofs": 
      total_delta  = total_delta + int(dev.free) - int(dev.old_free)
      total_free   = total_free + int(dev.free)      
      total_device = total_device + int(1)
      total_size   = total_size + int(dev.total)    
      dev.display()
  print " ________%3d  %5.1f%% %6s  %7s  / %7s  _________________________________ "%(total_device,good_percent,KB_to_other_unit(total_free), delta_KB(total_delta), KB_to_other_unit(total_size)) 
  if period == 0: sys.exit(0)
  time.sleep(int(period))

