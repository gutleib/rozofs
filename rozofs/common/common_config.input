#_______________________________________________________________________________________
# 
# Call  ../../tools/generate_all_config.py to generate common_config.h as well as common_config.c
#
#_______________________________________________________________________________________
#
# Syntax is as follow:
# 
# ......................................................
# // one or more...
# // ... comment lines
# <type> <scope> <name> <default> [<extra>]
# ......................................................
#
# Where
#   //          is the begining of a comment line for the following parameter
#   <type>      is the parameter type within 
#               - INT   : at least 32 bits signed integer
#               - LONG  : 64 bits signed integer
#               - STRING: character string
#               - ENUM  : a character string within a list of values
#               - BOOL  ; boolean True or False
#   <scope>     is any string you want to classify the different parameters in groups
#   <name>      is any parameter name
#   <default>   is the default parameter value. (STRING must be quoted).
#   <extra>     is an optional field of the parameter dependant on the <type>
#               - INT and LONG extra: 
#                 min:max : minimum and maximum values (included) of the integer
#               - ENUM mandatory extra
#                 a comma separated list of possible values.
#
#_______________________________________________________________________________________

// Number of core files that the system is allowed to keep for all the modules of this server.
// Older core files are kept while newest are removed.	
INT 	global 	nb_core_file		        1 0:8
// Directory where the core files are stored.
STRING 	global 	core_file_directory		""
// Enables to take into account the NUMA architecture of the board in 
// order to collocate some RozoFS modules on the same node for memory
// access efficiency.
BOOL 	global 	numa_aware			False
// Ethernet Adaptor numa node (-1 not significant)
INT     global adaptor_numa_node                -1 
// processor model:
// EPYC: all AMD CPUs 
// INTEL:   covers E5 & skylake families

ENUM  global processor_model        "INTEL"   "EPYC,INTEL"

// Number of slices in the STORIO.
INT	global 	storio_slice_number		1024 8:(32*1024)
// File distribution mode upon cluster, storages and devices. Check rozofs.conf manual.
// 0         = Cluster size balancing                   + device size balancing
// 1,2,3     = Cluster strict round robin               + device write spreading
// 4         = Cluster strict round robin               + device read spreading
// 5         = Cluster weighted round robin (nb SID)    + device write spreading
// 6         = Cluster weighted round robin (nb SID)    + device read spreading
// 7         = Cluster weighted round robin (free size) + device write spreading
// 6         = Cluster weighted round robin (free size) + device read spreading
INT	global 	file_distribution_rule		0 0:100
// DSCP for exchanges from/to the STORIO.
INT	global 	storio_dscp  			46 0:46
// DSCP for exchanges from/to the EXPORTD.
INT	global 	export_dscp  			34 0:34
// Max number of file that the exportd can remove from storages in a run.
// A new run occurs every 2 seconds.
INT	export 	trashed_file_per_run		1000
// High trash water mark when FID recycling is activated.
// When the trash has already this number of files, files are no more
// deleted but recycled.
INT	export 	trash_high_threshold            1000 0:1000000
// Whether FID recycling feature is activated.
BOOL	export 	fid_recycle                     False
// Whether STORCLI acknowleges write request on inverse or forward STORIO responses.
BOOL	client 	wr_ack_on_inverse		False
// To indicate if we can respond before write_pending reaches 0.
BOOL	client 	wr_pending_anticipated		False
INT	export 	export_buf_cnt			128 32:1024
// Number of sub threads in the storaged
INT	storage nb_storaged_subthread         	8 2:16
/// Number of disk threads in the STORIO.
INT	storage nb_disk_thread         		4 2:64
/// Number of RDMA write threads in the STORIO.
INT	storage nb_write_rdma_threads         	4 2:64
// assert that Boolean to activate the RDMA write threads.
BOOL	storage rdma_write_thread_enable 	False
// Whether CRC32 MUST be checked by STORIO.
BOOL	storage crc32c_check			True
// Whether CRC32 MUST be computed by STORIO.
BOOL	storage crc32c_generate			True
// Whether CRC32 MUST be absolutly hardware computed by STORIO.
BOOL	storage crc32c_hw_forced  		False
// Whether STORIO device monitoring should avoid reading from 
// devices when no access have occured for read or write. This
// enables disk spin down to occur.
BOOL	storage allow_disk_spin_down		False
// Over which device usage threashold should the STORIO log the event. 
INT	storage disk_usage_threshold		0 0:100
// Over which device read delay threashold should the STORIO log the event. 
INT	storage disk_read_threshold  		0 
// Over which device write delay threashold should the STORIO log the event. 
INT	storage disk_write_threshold  		0
// Number of STORIO receive buffer.
INT	storage storio_buf_cnt			256 32:1024
// Number of block to which the chunk files should be truncated on storage 
// node at the time it is recycled.
INT	storage recycle_truncate_blocks         0
// To activate export writebehind attributes thread.
BOOL	export export_attr_thread		True
// To activate rozofsmount reply fuse threads.
INT	client rozofsmount_fuse_reply_thread	0 0:4
// Support of deleted directory/file versioning.
BOOL    export export_versioning 		False     
// Number of MB to account a file for during file distribution phase
INT   	export alloc_estimated_mb		1
// Name of an executable file that the storaged should call at startup
STRING	storage	storaged_start_script		""
// Delay from which a rozofsmoun client is declared disconnected and its 
// file locks are automatically removed
INT   	export client_flock_timeout		30  15:600
// Whether the storage has to automount the devices
BOOL	storage device_automount 		False
// automount path where the devices should be mounted
STRING  storage	device_automount_path           "/srv/rozofs/storages"
// Device mounting options
STRING  storage device_automount_option 	""
// Time out between export and storage for remove and stat
INT     export mproto_timeout 	10           1:60
// Directory to use on the export to build temporary files.
// Used for instance to build list of files to rebuild.
STRING 	export 	export_temporary_dir		"/tmp"
// Directory to use on the storage node to build temporary files.
// Used for instance by the rebuild process.
STRING 	storage storage_temporary_dir		"/tmp"
// To activate workaround that make mkdir respond OK instead of EEXIST
// when the directory is already created 
BOOL	export mkdir_ok_instead_of_eexist	False
// To activate workaround that make mknod respond OK instead of EEXIST
// when the file is already created  
BOOL	export mknod_ok_instead_of_eexist	False
// To activate fast reconnect from client to exportd
BOOL	client client_fast_reconnect	        False
// delay is minutes after which a file is considered as an archived file (unit is minute)
INT  client    archive_file_delay        10 0:3600
// dentry cache timeout for archive file type (unit is second)
INT  client    archive_file_dentry_timeout        30 0:300
// attribute cache timeout for archive file type (unit is second)
INT client     archive_file_attr_timeout        30 0:300
// To disable synchronous write of attributes when set to True
BOOL	export disable_sync_attributes	        False
// self healing : Paralellism factor for device self healing feature
// i.e the number of process to run rebuild in //
INT     storage device_self_healing_process 	8 1:64
// self healing : Fault duration in minutes before device selfhealing starts
INT     storage device_selfhealing_delay        15 0:10000
// self healing :  throughput limitation in MB/s per rebuild process in //
// for reading external projections. The writing on disk is only
// 1/2 of that in layout 0, 1/4 in layout 1...
// 0 means no limit
INT     storage device_selfhealing_read_throughput        40 0:10000
// self healing : possible modes
// spareOnly  only self repair on a spare disk
// relocate   also repair on remaining disks when no spare available
// resecure   repair on spare device when available, and then resecure files on
//            spare storages when no spare device is available
// none       No self healing is processed. Only manual rebuild is allowed.
ENUM  storage device_selfhealing_mode        "spareOnly"   "spareOnly,resecure,relocate,none"
// Export host names or IP addresses separated with / 
// Required for selfhealing.
// Required for spare file restoring to its nominal location.
STRING  storage export_hosts                   ""
// Minimum delay between the deletion request and the effective projections deletion
INT     export deletion_delay 	30           
// Spare file restoring : whether the service is active or not
BOOL    storage spare_restore_enable                True	
// Spare file restoring : how often the process runs  
INT     storage spare_restore_loop_delay            240  
// Default rebuild reloop value 
// Mainly used to help simulation
INT     storage default_rebuild_reloop            4  
// Spare file restoring : throughput limitation for reading and analyzing spare files in MB/s
// 0 means no limit
INT     storage spare_restore_read_throughput       10
// Storio number of FID context in 1K unit
INT     storage storio_fidctx_ctx                256      
// When that flag is asserted, the rozofsmount client can cache the extended attributes
BOOL 	client 	client_xattr_cache	            False
// When that flag is asserted, the rozofsmount client performs setattr in asynchronous mode
BOOL 	client 	async_setattr	            False
// statfs period in seconds. minimum is 0.
INT     client statfs_period 	10 
// Spare file restoring : Number of spare file context in 1K unit
INT     storage spare_restore_spare_ctx 16
// Minimum number of inodes that must be available on metadata device to allow a mknod/mkdir operation
INT     export min_metadata_inodes             262144
// Minimum available size in MB that must be available on metadata device to allow a mknod/mkdir operation
INT     export min_metadata_MB                   2048
// Number of trash threads that work in parallel
INT     export nb_trash_thread                   2    1:8
// Number of thin provisioning threads that work in parallel
INT     export nb_thin_thread                   2    1:4
// Max number of files that the exportd can submit to storages to get the number of blocks (thin provisioning) in a run.
// A new run occurs every 2 seconds.
INT	export 	thin_scan_file_per_run		1000
// Thin provisioning Level 1 hash table size in power of 2 (changing this parameter will take effect on the next export restart) 
INT	export 	thin_lv1_hash_tb_size		10 6:128
// Guard delay in seconds between two file scanning of a file that belongs to an exportd configured for thin provisioning
INT   	export expthin_guard_delay_sec		10  1:600
// When that flag is asserted, the storcli uses RDMA when storio supports it
BOOL 	storcli 	rdma_enable	            False
// When that flag is asserted, the storcli uses RDMA for data transfer and RPC messages
BOOL 	storcli 	rdma_full	            False
// Minimum read/write size in KB to trigger RDMA transfer
INT     storcli min_rmda_size_KB                   64
// RDMA write dequeue delay: delay in ms before dequeueing a new request (for network with latency)
INT     storage rdma_delay_ms                   0
// RDMA write dequeue delay: threshold when reached that prevents RDMA delay to be called
INT     storage rdma_delay_threshold            12  0:64
// number of Mojette threads
INT     storcli mojette_thread_count                4  1:4
// number of Fuse threads
INT     client reply_thread_count                2  1:8
// Buffer read by-pass
BOOL     client bufread_bypass                False
// Guard delay associated with directory re-write used for tracking children changes within a directory 
INT   	export expdir_guard_delay_sec		10  1:7200
// Maximum number of entries that the export level 2 cache can contain (unit is KB) 
INT   	export level2_cache_max_entries_kb		512  1:4096
// When that flag is asserted, RozoFS operates in standalone mode only.
BOOL 	global 	standalone	            False
// Whether file locks must be persistent on exportd restart/switchover or not
BOOL   export  persistent_file_locks                False

// Minimum % of free space in a volume.
// When the free space of a volume reaches this value, file creation requests
// receive back ENOSPC in order to try to avoid later write errors.
// A value of 0 means there is no limit on the volume.
// A value of 100 forbids every file creation.
INT   	export minimum_free_size_percent	4  0:100
// Whether RozoFS devices must mandatorily be identified by a valid label.
// Storages will not mount any device not having a valid RozoFS label.
BOOL 	storage mandatory_device_label	        False
// When that flag is asserted any storcli can be selected for reading.
BOOL    client storcli_read_parallel 		False     
// rozodiag mode
// server     Each RozoFS module listen for rozodiag command on its dedicated server port
// client     Each RozoFS module is client of a local rozodiag server that relays rozodiag commands
// both       Each RozoFS module is client as well as server
//    
ENUM  global diagnostic_mode        "both"   "both,server,client"


// Whether export file tracking reader for rozofsmount batch is enabled
BOOL   expbt  expbt_active                      False
/// Number of file tracking reader threads.
INT	expbt nb_expbt_thread         		4 2:32
// Number of STORIO receive buffer.
INT	expbt expbt_buf_cnt		        32 8:128

// Max number of entries in the dirent and root bitmap caches
INT	batch dirent_cache_size		        250000 2:500000
// retention delay before memory release for dirent and bitmap entries in cache (seconds)
INT	batch dirent_garbage_delay		5 1:60
// Max number of entries in tracking file cache
INT	batch trk_cache_size		        2048 32:8192
// retention delay before memory release in tracking file cache (seconds)
INT	batch trk_garbage_delay		        5 1:60
// expiration delay of an entry of the tracking file cache (seconds)
INT	batch trk_expiration_delay		120 4:600
